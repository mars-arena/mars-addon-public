library Combat requires Events, Damage, HashCleaner {

// Settings

	// @const время, в течение которого юнит считается в бою
	constant real TIMEOUT = 5.0;

	// @const максимальная дистанция, на которой юнит считается в бою
	constant real RANGE = 1200.;

// Event API

	// Событие при входе или выходе юнита из боя
	//
	// GetCombatUnit() -> unit
	// IsCombatEntering() -> boolean
	// IsCombatLeaving() -> boolean
	//! @gui
	public Event EVENT_COMBAT;

	unit CombatUnit;
	boolean IsEntering;
	boolean IsLeaving;

	//! gui [ResponseCombat], TriggerCalls
	public function GetCombatUnit() -> unit { debug DebugEvent.a(EVENT_COMBAT).run(); return CombatUnit; }
	public function IsCombatEntering() -> boolean { debug DebugEvent.a(EVENT_COMBAT).run(); return IsEntering; }
	public function IsCombatLeaving() -> boolean { debug DebugEvent.a(EVENT_COMBAT).run();  return IsLeaving; }
	//! endgui

// API

	// Проверяет, находится ли юнит в сражении
	// @arg unit whichUnit целевой юнит
	// @return boolean true, если юнит в бою
	//! @gui [Unit], TriggerCalls
	public function IsUnitInCombat(unit whichUnit) -> boolean {
		Combat this = Combat.load(GetHandleId(whichUnit)); 
		if (!IsSet(this)) 
			return false;
		return this.isInCombat;
	}

// System

	struct Combat {
		unit whichUnit;
		boolean isInCombat;
		timer tm;

		static key HASH_ID;

		static method create(unit whichUnit) -> Combat {
			Combat this = Combat.allocate();

			this.whichUnit = whichUnit;
			SaveInteger(HT, GetHandleId(whichUnit), HASH_ID, this);

			this.tm = CreateTimer();
			SaveHandleDataInt(tm, this);

			return this;
		}

		static method load(integer hashId) -> Combat {
			return LoadInteger(HT, hashId, HASH_ID);
		}

		static method get(unit whichUnit) -> Combat {
			Combat this = Combat.load(GetHandleId(whichUnit)); 
			if (!IsSet(this))
				this = Combat.create(whichUnit);
			return this;
		}

		method destroy() {
			FlushTimer(tm); tm = null;
			whichUnit = null;
			this.deallocate();
		}

		method executeEvent() {
			CombatUnit = whichUnit;
			IsEntering = isInCombat;
			IsLeaving = !isInCombat;
			ExecuteEvent(EVENT_COMBAT);
		}

		method enter() {
			if (!isInCombat) {
				isInCombat = true;
				this.executeEvent();
			}
			TimerStart(tm, TIMEOUT, false, function() {
				Combat this = LoadHandleDataInt(GetExpiredTimer());
				this.leave();
			});
		}

		method leave() {
			PauseTimer(tm);
			if (isInCombat) {
				isInCombat = false;
				this.executeEvent();
			}
		}

	}

	function onInit() {
		EVENT_COMBAT = CreateEvent("EVENT_COMBAT");

		EventRegisterAction(EVENT_DAMAGE, function() {
			unit attacked = GetDamageAttackedUnit();
			unit attacker = GetDamageAttackingUnit();
			Point2D sourcePosition = GetDamageSourcePosition();
			if (!IsUnitAlly(attacker, GetOwningPlayer(attacked)) &&
				sourcePosition.distToWidget(attacked) <= RANGE
			) {
				Combat.get(attacker).enter();
				Combat.get(attacked).enter();
			}
			attacked = null;
			attacker = null;
		});

		EventRegisterAction(EVENT_CLEAR_HASH, function() {
			Combat this = Combat.load(GetTriggerHandleId());
			if (IsSet(this)) this.destroy();
		});
	}

}