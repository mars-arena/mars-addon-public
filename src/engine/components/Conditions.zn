library Conditions requires Stuns, Buffs {

	unit FILTER_OWNER_UNIT_GET;
	unit FILTER_TARGET_UNIT_GET;
	real FILTER_REAL_GET;

	//! gui [ResponseCondition], TriggerCalls
	public function GetFilterOwnerUnit() -> unit {return FILTER_OWNER_UNIT_GET;}
	public function GetFilterTargetUnit() -> unit {return FILTER_TARGET_UNIT_GET;}
	public function GetFilterReal() -> real {return FILTER_REAL_GET;}
	//! endgui

	// Инициализирует условие вместе с передачей параметров
	// @arg code func код фильтрации
	// @arg unit ownerUnit юнит-владелец условия
	// @return conditionfunc
	//! @gui [Condition], TriggerCalls
	public function ConditionWithOwner(code func, unit ownerUnit) -> conditionfunc {
		FILTER_OWNER_UNIT_GET = ownerUnit;
		return Condition(func);
	}

	// Инициализирует условие вместе с передачей параметров
	// @arg code func код фильтрации
	// @arg unit ownerUnit юнит-владелец условия
	// @arg unit targetUnit юнит-цель условия
	// @return conditionfunc
	//! @gui [Condition], TriggerCalls
	public function ConditionParameters(code func, unit ownerUnit, unit targetUnit, real filterReal) -> conditionfunc {
		FILTER_OWNER_UNIT_GET = ownerUnit;
		FILTER_TARGET_UNIT_GET = targetUnit;
		FILTER_REAL_GET = filterReal;
		return Condition(func);
	}

	//! gui [Unit], TriggerCalls
	private function IsUnitCannotBeMoved(unit initiator, unit target) -> boolean {
		return
			UnitHasAbility(target, 'A1ZO') ||
			IsUnitType(target, UNIT_TYPE_SNARED) ||
			(
				GetUnitMoveSpeed(target) < 100.00  &&
				IsUnitAlly(target, GetOwningPlayer(initiator))
			)
		;
	}

	// Проверяет, может ли юнит быть перемещён
	// @arg unit initiator инициатор проверки
	// @arg unit target целевой юнит
	// @return boolean
	public function IsUnitCanBeMoved(unit initiator, unit target) -> boolean {
		return !IsUnitCannotBeMoved(initiator, target);
	}

	// Проверяет, является ли юнит разоружённым
	// @arg unit whichUnit целевой юнит
	// @return boolean
	public function IsUnitDisarmed(unit whichUnit) -> boolean {
		return
			GetUnitAbilityLevel(whichUnit, DISARM_BUFF_ID) > 0
		;
	}

	// Проверяет, может ли юнит выполнять действия
	// @arg unit whichUnit целевой юнит
	// @return boolean
	public function IsUnitCanDoActions(unit whichUnit) -> boolean {
		return
			!IsUnitStunnedExceptType(whichUnit, LOST_CONTROL_STUN) &&
			!IsUnitHexed(whichUnit) &&
			!IsUnitBuffByType(whichUnit, basicfear_tid)
		;
	}

	// Проверяет, может ли юнит атаковать
	// @arg unit whichUnit целевой юнит
	// @return boolean
	public function IsUnitCanAttack(unit whichUnit) -> boolean {
		return
			IsUnitCanDoActions(whichUnit) &&
			!IsUnitDisarmed(whichUnit)
		;
	}

	// Проверяет, есть ли у юнита атака
	// @arg unit whichUnit целевой юнит
	// @return boolean
	public function IsUnitHasAttack(unit whichUnit) -> boolean {
		return
			IsUnitType(whichUnit, UNIT_TYPE_MELEE_ATTACKER) ||
			IsUnitType(whichUnit, UNIT_TYPE_RANGED_ATTACKER)
		;
	}

	// Проверяет, является ли юнит строением
	// @arg unit whichUnit целевой юнит
	// @return boolean
	public function IsUnitStructure(unit whichUnit) -> boolean {
		return IsUnitType(whichUnit, UNIT_TYPE_STRUCTURE) || IsUnitType(whichUnit, ConvertUnitType(20));
	}
	//! endgui

}
