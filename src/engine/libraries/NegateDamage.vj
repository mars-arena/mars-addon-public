library NegateDamageLib

	globals
		private constant group Group = CreateGroup()
		private constant timer Timer = CreateTimer()
		private constant integer MAX_LIFE_BONUS = 10000
	endglobals

	//! gui [Unit], TriggerCalls
	// Возвращает максимальное здоровье юнита
	// @arg unit u юнит, для которого нужно получить максимальное здоровье
	// @return real максимальное здоровье юнита
	function GetUnitMaxLife takes unit u returns real
		return GetUnitState(u, UNIT_STATE_MAX_LIFE) - GetUnitAbilityLevel(u, MAX_LIFE_BONUS_ABILITY) * MAX_LIFE_BONUS
	endfunction

	// Возвращает значение состояния юнита
	// @arg unit u юнит, для которого нужно получить значение состояния
	// @arg unitstate state значение состояния юнита
	// @return real значение состояния юнита
	function GetUnitStateHook takes unit u, unitstate state returns real
		if state == UNIT_STATE_MAX_LIFE then
			return GetUnitMaxLife(u)
		endif
		return GetUnitState(u, state)
	endfunction
	
	// Возвращает процент состояния юнита
	// @arg unit whichUnit юнит, для которого нужно получить процент состояния
	// @arg unitstate whichState состояние юнита
	// @arg unitstate whichMaxState максимальное состояние юнита
	// @return real процент состояния юнита
	function GetUnitStatePercentHook takes unit whichUnit, unitstate whichState, unitstate whichMaxState returns real
		local real value    = GetUnitStateHook(whichUnit, whichState)
		local real maxValue = GetUnitStateHook(whichUnit, whichMaxState)
	
		// Return 0 for null units.
		if (whichUnit == null) or (maxValue == 0) then
			return 0.0
		endif
	
		return value / maxValue * 100.0
	endfunction
	
	// Возвращает процент здоровья юнита
	// @arg unit whichUnit юнит, для которого нужно получить процент здоровья
	// @return real процент здоровья юнита
	function GetUnitLifePercentHook takes unit whichUnit returns real
		return GetUnitStatePercentHook(whichUnit, UNIT_STATE_LIFE, UNIT_STATE_MAX_LIFE)
	endfunction
	//! endgui

	private function ProcessUnits takes nothing returns nothing
		local unit u
		local real life2set
	
		loop
			set u = FirstOfGroup(Group)
			exitwhen u == null
			call GroupRemoveUnit(Group, u)
	
			if UnitAlive(u) then
				set life2set = GetWidgetLife(u)
				call UnitRemoveAbility(u, MAX_LIFE_BONUS_ABILITY)
				call SetWidgetLife(u, life2set)
			else
				call UnitRemoveAbility(u, MAX_LIFE_BONUS_ABILITY)
			endif
		endloop
	endfunction
	
	function NegateDamage takes unit u, real negated returns nothing
		local real life2set = GetWidgetLife(u) + negated
	
		if life2set > GetUnitState(u, UNIT_STATE_MAX_LIFE) then
			call GroupAddUnit(Group, u)
			call UnitAddAbility(u, MAX_LIFE_BONUS_ABILITY)
		endif
	
		call SetWidgetLife(u, life2set)
	
		call TimerStart(Timer, 0., false, function ProcessUnits)
	endfunction
	
endlibrary
