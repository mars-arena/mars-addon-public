library CoordUtils

	globals 
		private constant integer AbilityUnitZ = 'Amrf'
		private location locationZ = Location(0, 0)
	endglobals  

	// Устанавливает позицию юнита с учетом возможных смещений, чтобы избежать резких скачков.
	//
	// @arg unit `source` юнит, позицию которого нужно установить.
	// @arg real `x` новая координата X.
	// @arg real `y` новая координата Y.
	function SetUnitPositionSmooth takes unit source, real x, real y returns nothing
		local real last_x = GetUnitX(source)
		local real last_y = GetUnitY(source)
		local boolean bx
		local boolean by

		call SetUnitPosition(source, x, y)

		if (RAbsBJ(GetUnitX(source) - x) > 0.5) or (RAbsBJ(GetUnitY(source) - y) > 0.5) then

			call SetUnitPosition(source, x, last_y)
			set bx = RAbsBJ(GetUnitX(source) - x) <= 0.5
			call SetUnitPosition(source, last_x, y)
			set by = RAbsBJ(GetUnitY(source) - y) <= 0.5

			if bx then
				call SetUnitPosition(source, x, last_y)
			elseif by then
				call SetUnitPosition(source, last_x, y)
			else
				call SetUnitPosition(source, last_x, last_y)
			endif

		endif
	endfunction

	// Вычисляет смещение координаты X на основе заданного расстояния и угла от точки.
	//
	// @arg real `x` начальная координата x.
	// @arg real `distance` расстояние от начальной точки.
	// @arg real `angle` угол в градусах.
	// @return real - результирующая координата x после применения полярного смещения.
	function GetPolarOffsetX takes real x,real distance,real angle returns real
		return x+distance*Cos(angle*bj_DEGTORAD)
	endfunction

	// Вычисляет смещение координаты Y на основе заданного расстояния и угла от точки.
	//
	// @arg real `y` начальная координата y.
	// @arg real `distance` расстояние от начальной точки.
	// @arg real `angle` угол в градусах.
	// @return real - результирующая координата y после применения полярного смещения.
	function GetPolarOffsetY takes real y,real distance,real angle returns real
		return y+distance*Sin(angle*bj_DEGTORAD)
	endfunction

	// Перемещает локацию на новую позицию на основе полярного смещения от ее текущей позиции.
	//
	// @arg location `target` локация для перемещения.
	// @arg real `distance` расстояние для перемещения локации.
	// @arg real `angle` угол в градусах для перемещения локации.
	function MoveLocationPolar takes location target,real distance,real angle returns nothing
		local real x=GetPolarOffsetX(GetLocationX(target),distance,angle)
		local real y=GetPolarOffsetY(GetLocationY(target),distance,angle)
		call MoveLocation(target,x,y)
	endfunction

	// Перемещает юнита на новую позицию на основе полярного смещения от его текущей позиции.
	//
	// @arg unit `target` юнит для перемещения.
	// @arg real `distance` расстояние для перемещения юнита.
	// @arg real `angle` угол в градусах для перемещения юнита.
	function SetUnitPositionPolar takes unit target,real distance,real angle returns nothing
		call SetUnitX(target,GetPolarOffsetX(GetUnitX(target),distance,angle))
		call SetUnitY(target,GetPolarOffsetY(GetUnitY(target),distance,angle))
	endfunction

	// Вычисляет угол между двумя наборами координат.
	//
	// @arg real `x1`, `y1` координаты первой точки.
	// @arg real `x2`, `y2` координаты второй точки.
	// @return real - угол в градусах между двумя точками.
	function AngleBetweenCoords takes real x1,real y1,real x2,real y2 returns real
		return bj_RADTODEG*Atan2(y2-y1,x2-x1)
	endfunction

	// Вычисляет угол между двумя виджетами.
	//
	// @arg widget `target1` первый виджет.
	// @arg widget `target2` второй виджет.
	// @return real - угол в градусах между двумя виджетами.
	function AngleBetweenWidgets takes widget target1,widget target2 returns real
		return AngleBetweenCoords(GetWidgetX(target1),GetWidgetY(target1),GetWidgetX(target2),GetWidgetY(target2))
	endfunction

	// Вычисляет 2D расстояние между двумя наборами координат.
	//
	// @arg real `x1`, `y1` координаты первой точки.
	// @arg real `x2`, `y2` координаты второй точки.
	// @return real - расстояние между двумя наборами координат.
	function DistanceBetweenCoords takes real x1,real y1,real x2,real y2 returns real
		local real dx=x2-x1
		local real dy=y2-y1
		return SquareRoot(dx*dx+dy*dy)
	endfunction

	// Вычисляет 3D расстояние между двумя наборами координат.
	//
	// @arg real `x1`, `y1`, `z1` координаты первой точки.
	// @arg real `x2`, `y2`, `z2` координаты второй точки.
	// @return real - 3D расстояние между двумя наборами координат.
	function DistanceBetweenCoords3D takes real x1,real y1,real z1,real x2,real y2,real z2 returns real
		local real dx=x2-x1
		local real dy=y2-y1
		local real dz=z2-z1
		return SquareRoot(dx*dx+dy*dy+dz*dz)
	endfunction

	// Вычисляет расстояние между двумя виджетами.
	//
	// @arg widget `target1` первый виджет.
	// @arg widget `target2` второй виджет.
	// @return real - расстояние между двумя виджетами.
	function DistanceBetweenWidgets takes widget target1,widget target2 returns real
		return DistanceBetweenCoords(GetWidgetX(target1),GetWidgetY(target1),GetWidgetX(target2),GetWidgetY(target2))
	endfunction

	// Получает высоту местности по заданным координатам.
	//
	// @arg real `x`, `y` координаты, для которых нужно получить высоту местности.
	// @return real - высота местности по заданным координатам.
	function GetTerrainZ takes real x,real y returns real
		call MoveLocation(locationZ,x,y)
		return I2R(R2I(GetLocationZ(locationZ)))
	endfunction

	// Получает общую высоту (высота местности + высота полета) юнита.
	//
	// @arg unit `target` целевой юнит.
	// @return real - общая высота юнита на его текущей позиции.
	function GetUnitZ takes unit target returns real
		return GetTerrainZ(GetUnitX(target),GetUnitY(target))+GetUnitFlyHeight(target)
	endfunction

	function GetUnitTerrainCliffLevel takes unit target returns integer
		return GetTerrainCliffLevel(GetUnitX(target), GetUnitY(target))
	endfunction

	// Добавляет способность AbilityUnitZ юниту, если он ее еще не имеет. 
	//
	// @arg unit `target` целевой юнит.
	function UnitAddAbilityZ takes unit target returns nothing
		if (GetUnitAbilityLevel(target,AbilityUnitZ)==0) then
			call UnitAddAbility(target,AbilityUnitZ)
		endif
	endfunction

	// Удаляет способность AbilityUnitZ у указанного юнита, если она присутствует.
	// 
	// @arg unit `target` юнит, у которого необходимо удалить способность.
	function UnitRemoveAbilityZ takes unit target returns nothing
		if (GetUnitAbilityLevel(target,AbilityUnitZ)>0) then
			call UnitRemoveAbility(target,AbilityUnitZ)
		endif
	endfunction

	// Устанавливает высоту полета для указанного юнита.
	// 
	// @arg unit `target` юнит, которому необходимо установить высоту.
	// @arg real `z` новая высота полета.
	// @return unit - возвращает тот же юнит после установки новой высоты.
	function SetUnitZ takes unit target,real z returns unit
		call SetUnitFlyHeight(target,z-GetTerrainZ(GetUnitX(target),GetUnitY(target)),0)
		return target
	endfunction

	// Устанавливает координаты X и Y для указанного юнита.
	// 
	// @arg unit `target` юнит, которому необходимо установить координаты.
	// @arg real `x` новая координата X.
	// @arg real `y` новая координата Y.
	// @return unit - возвращает тот же юнит после установки новых координат.
	function SetUnitXY takes unit target,real x,real y returns unit
		call SetUnitX(target,x)
		call SetUnitY(target,y)
		return target
	endfunction

	// Устанавливает координаты X, Y и высоту полета Z для указанного юнита.
	// 
	// @arg unit `target` юнит, которому необходимо установить координаты и высоту.
	// @arg real `x` новая координата X.
	// @arg real `y` новая координата Y.
	// @arg real `z` новая высота полета.
	// @return unit - возвращает тот же юнит после установки новых параметров.
	function SetUnitXYZ takes unit target,real x,real y,real z returns unit
		call SetUnitXY(target,x,y)
		call SetUnitZ(target,z)
		return target
	endfunction

	// Устанавливает координаты X, Y, высоту полета Z и направление (угол поворота) для указанного юнита.
	// 
	// @arg unit `target` юнит, которому необходимо установить параметры.
	// @arg real `x` новая координата X.
	// @arg real `y` новая координата Y.
	// @arg real `z` новая высота полета.
	// @arg real `f` новое направление (угол поворота в градусах).
	// @return unit - возвращает тот же юнит после установки новых параметров.
	function SetUnitXYZF takes unit target,real x,real y,real z,real f returns unit
		call SetUnitXY(target,x,y)
		call SetUnitZ(target,z)
		call SetUnitFacing(target,f)
		return target
	endfunction

	// Находит длину перпендикуляра от отрезка, заданного Xa, Ya, Xb, Yb к точке, заданной Xc, Yc.
	// https://xgm.guru/p/wc3/perpendicular
	//
	// @arg real `Xa` координата X первой точки отрезка.
	// @arg real `Ya` координата Y первой точки отрезка.
	// @arg real `Xb` координата X второй точки отрезка.
	// @arg real `Yb` координата Y второй точки отрезка.
	// @arg real `Xc` координата X точки C.
	// @arg real `Yc` координата Y точки C.
	// @return real - возвращает длину перпендикуляра от точки C к отрезку AB.
	function Perpendicular takes real Xa,real Ya,real Xb,real Yb,real Xc,real Yc returns real
		return SquareRoot((Xa-Xc)*(Xa-Xc)+(Ya-Yc)*(Ya-Yc))*Sin(Atan2(Yc-Ya,Xc-Xa)-Atan2(Yb-Ya,Xb-Xa))
	endfunction

	// Вычисляет разницу между двумя углами.
	// https://xgm.guru/p/wc3/warden-math
	//
	// @arg real `a1` первый угол в градусах.
	// @arg real `a2` второй угол в градусах.
	// @return real - возвращает абсолютное значение разницы между двумя углами.
	function AngleDifference takes real a1,real a2 returns real
		local real x
		set a1=ModuloReal(a1,360)
		set a2=ModuloReal(a2,360)
		if (a1>a2) then
			set x=a1
			set a1=a2
			set a2=x
		endif
		set x=a2-360
		if (a2-a1>a1-x) then
			set a2=x
		endif
		return RAbsBJ(a1-a2)
	endfunction

	// Вычисляет высоту для параболической кривой на основе заданных параметров.
	// 
	// @arg real `h` максимальная высота на середине расстояния.
	// @arg real `d` общее расстояние до цели.
	// @arg real `x` расстояние от исходной цели до точки.
	// @return real - возвращает вычисленную высоту для заданной точки на параболической кривой.
	function ParabolaZ takes real h,real d,real x returns real
		return (4*h/d)*(d-x)*(x/d)
	endfunction

	// Вычисляет высоту для модифицированной параболической кривой на основе заданных параметров.
	// 
	// @arg real `zs` начальная высота одного края дуги.
	// @arg real `ze` конечная высота другого края дуги.
	// @arg real `h` максимальная высота на середине расстояния.
	// @arg real `d` общее расстояние до цели.
	// @arg real `x` расстояние от исходной цели до точки.
	// @return real - возвращает вычисленную высоту для заданной точки на модифицированной параболической кривой.
	function ParabolaZ2 takes real zs,real ze,real h,real d,real x returns real
		return (2*(zs+ze-2*h)*(x/d-1)+(ze-zs))*(x/d)+zs
	endfunction

	// Нормализует угол, приводя его к диапазону [0, 360).
	//
	// @arg real `angle` угол для нормализации.
	// @return real - возвращает нормализованный угол.
	function AngleNormalize takes real angle returns real
		if (angle>360) then
			set angle=angle-360
		endif
		if (angle<0) then
			set angle=360+angle
		endif
		return angle
	endfunction

	function AngleTowards takes real angle, real toAngel, real angleOffset returns real
		local real towardAngel = angle
		if AngleDifference(toAngel, angle + 5.0) < AngleDifference(toAngel, angle - 5.0) then
			set towardAngel = towardAngel + angleOffset
		else
			set towardAngel = towardAngel - angleOffset
		endif
		
		set towardAngel = AngleNormalize(towardAngel)
		return towardAngel
	endfunction

	// Вычисляет площадь треугольника по координатам его вершин.
	//
	// @arg real `x1, y1` координаты первой вершины.
	// @arg real `x2, y2` координаты второй вершины.
	// @arg real `x3, y3` координаты третьей вершины.
	// @return real - возвращает площадь треугольника.
	function TriS takes real x1, real y1, real x2, real y2, real x3, real y3 returns real
		return RAbsBJ(x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))/2
	endfunction

	// Проверяет, находятся ли координаты внутри треугольника.
	//
	// @arg real `x, y` координаты точки для проверки.
	// @arg real `x1, y1, x2, y2, x3, y3` координаты вершин треугольника.
	// @return boolean - возвращает true, если точка внутри треугольника, иначе false.
	function IsCoordsInTriangle takes real x, real y, real x1, real y1, real x2, real y2, real x3, real y3 returns boolean
		return R2I(TriS(x1, y1, x2, y2, x3, y3))==R2I(TriS(x1, y1, x2, y2, x, y)+TriS(x2, y2, x3, y3, x, y)+TriS(x1, y1, x3, y3, x, y))
	endfunction

 	// Проверяет, находятся ли координаты внутри четырехугольника с использованием простого метода.
	//
	// @arg real `x, y` координаты точки для проверки.
	// @arg real `x1, y1, x2, y2, x3, y3, x4, y4` координаты вершин четырехугольника.
	// @return boolean - возвращает true, если точка внутри четырехугольника, иначе false.
	function IsCoordsIn4GonSimple takes real x, real y, real x1, real y1, real x2, real y2, real x3, real y3, real x4, real y4 returns boolean
		return IsCoordsInTriangle(x, y, x1, y1, x2, y2, x3, y3) or IsCoordsInTriangle(x, y, x1, y1, x4, y4, x3, y3)
	endfunction

	// Проверяет, находятся ли координаты внутри четырехугольника.
	//
	// @arg real `x, y` координаты точки для проверки.
	// @arg real `x1, y1, x2, y2, x3, y3, x4, y4` координаты вершин четырехугольника.
	// @return boolean - возвращает true, если точка внутри четырехугольника, иначе false.
	function IsCoordsIn4Gon takes real x, real y, real x1, real y1, real x2, real y2, real x3, real y3, real x4, real y4 returns boolean
		return IsCoordsInTriangle(x, y, x1, y1, x2, y2, x3, y3) or IsCoordsInTriangle(x, y, x1, y1, x4, y4, x3, y3) or IsCoordsInTriangle(x, y, x1, y1, x2, y2, x4, y4)
	endfunction

	// Вычисляет координаты точки на кривой Безье второй степени.
	//
	// @arg real `x, y, z` начальные координаты кривой Безье.
	// @arg real `x1, y1, z1` координаты контрольной точки.
	// @arg real `x2, y2, z2` конечные координаты кривой Безье.
	// @arg real `time` параметр времени, который определяет положение точки на кривой.
	// @return nothing - функция обновляет глобальные переменные TempReal01, TempReal02 и TempReal03 новыми значениями.
	/*
	function BezierCurvePow2_xyz_xyz_xyz takes real x, real y, real z, real x1, real y1, real z1, real x2, real y2, real z2, real time returns nothing
		local real a1 = x
		local real b1 = 2 * (x1 - x)
		local real c1 = x - 2 * x1 + x2
		local real a2 = y
		local real b2 = 2 * (y1 - y)
		local real c2 = y - 2 * y1 + y2
		local real a3 = z
		local real b3 = 2 * (z1 - z)
		local real c3 = z - 2 * z1 + z2
		local real xE = a1 + (b1 + c1 * time) * time
		local real yE = a2 + (b2 + c2 * time) * time
		local real zE = a3 + (b3 + c3 * time) * time
		set TempReal01 = xE
		set TempReal02 = yE
		set TempReal03 = zE
	endfunction
	*/

endlibrary
