library Debug requires Math {

	// Глобальный уровень отладки (0 = выкл, больше = более подробный).
	integer DEBUG_LEVEL = 3;

	// Вывести необработанное сообщение отладки всем игрокам, если уровень позволяет.
	// @arg integer level уровень подробности этого сообщения
	// @arg string msg сообщение для отображения
	function dbg(integer level, string msg) {
		integer i;
		if (level > DEBUG_LEVEL) return;
		for (0 <= i <= bj_MAX_PLAYERS) {
			DisplayTimedTextToPlayer(Player(i), 0, 0, 20, msg);
		}
	}

	// Отладка на уровне "info": общая информация.
	// @arg string msg сообщение для логирования
	public function Debug(string msg) {
		dbg(3, "|cff2163ff[i]|r - " + msg);
	}

	// Показать текстовую метку в координатах, полезно для отладки
	// @arg string s текст для отображения
	// @arg real x позиция по X
	// @arg real y позиция по Y
	public function DebugXY(string s, real x, real y) {
		texttag tt;
		tt = CreateTextTagLocBJ(s, null, 0, 10, GetRandomInt(50,100), GetRandomInt(50,100), GetRandomInt(50,100), GetRandomInt(0,10));
		SetTextTagPos(tt, x + GetRandomReal(-25,25), y + GetRandomReal(-25,25), 20.);
		SetTextTagPermanent(tt, false);
		SetTextTagLifespan(tt, 1.60);
		SetTextTagFadepoint(tt, 0.80);
		SetTextTagVelocityBJ(tt, GetRandomInt(70,90), GetRandomInt(80,110));
	}

	// Отладка на уровне "warning": потенциальные проблемы.
	// @arg string id идентификатор предупреждения
	// @arg string msg сообщение предупреждения
	public function Warning(string id, string msg) {
		dbg(2, "|cffffa500[w" + id + "]|r - " + msg);
	}

	// Отладка на уровне "error": серьёзные ошибки.
	// @arg string id идентификатор ошибки
	// @arg string msg подробное сообщение об ошибке
	public function Error(string id, string msg) {
		dbg(1, "|cffff0000[e" + id + "]|r - " + msg);
	}

	function onInit() {
		trigger t = CreateTrigger();
		TriggerRegisterPlayerChatEvent(t, Player(0), "-debug", false);
		TriggerAddAction(t, function() {
			string chat = GetEventPlayerChatString();
			string arg = StringCase(SubString(chat, 7, StringLength(chat)), false);
			if (StringLength(arg) == 0) {
				Debug("DEBUG_LEVEL: " + I2S(DEBUG_LEVEL));
			} else if (StringIsNumeric(arg)) {
				DEBUG_LEVEL = S2I(arg);
				Debug("DEBUG_LEVEL: " + I2S(DEBUG_LEVEL));
			} else {
				if (arg == "dmg") {
					DebugDmg = !DebugDmg;
					Debug("DEBUG_DMG: " + GetBooleanValue(DebugDmg));
				} else if (arg == "stun") {
					DebugStun = !DebugStun;
					Debug("DEBUG_STUN: " + GetBooleanValue(DebugStun));
				} else if (arg == "hero") {
					DebugHero = !DebugHero;
					Debug("DEBUG_HERO: " + GetBooleanValue(DebugHero));
				} else {
					Warning("DEB1", "Unknown parameter: " + arg);
				}
			}
		});

		t = null;
	}

}
