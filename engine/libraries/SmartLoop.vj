library SmartLoop {

	globals
		private integer array SmartIndex[100]
		private integer array SmartEnd[100]
		private integer SmartCount = 0
	endglobals

	// Инициализирует начало цикла
	// @arg integer start начальное значение цикла
	function InitSmartLoopStart takes integer start returns nothing
		set SmartCount = SmartCount + 1
		set SmartIndex[SmartCount] = start
	endfunction

	// Инициализирует конец цикла
	// @arg integer end конечное значение цикла
	function InitSmartLoopEnd takes integer end returns nothing
		set SmartEnd[SmartCount] = end
	endfunction
	
	// Инициализирует цикл с заданным начальным и конечным значением
	// @arg integer start начальное значение цикла
	// @arg integer end конечное значение цикла
	function InitSmartLoop takes integer start, integer end returns nothing
		set SmartCount = SmartCount + 1
		set SmartIndex[SmartCount] = start
		set SmartEnd[SmartCount] = end
	endfunction

	// Возвращает текущий индекс цикла
	// @return integer текущий индекс цикла
	function GetSmartLoopIndex takes nothing returns integer
		return SmartIndex[SmartCount]
	endfunction

	// Возвращает конечный индекс цикла
	// @return integer конечный индекс цикла
	function GetSmartLoopIndexEnd takes nothing returns integer
		return SmartEnd[SmartCount]
	endfunction

	// Увеличивает текущий индекс цикла на заданное значение
	// @arg integer step шаг увеличения индекса
	function PlusSmartLoopIndex takes integer step returns nothing
		set SmartIndex[SmartCount] = SmartIndex[SmartCount] + step
	endfunction

	// Конец цикла
	function EndSmartLoop takes nothing returns nothing
		set SmartCount = SmartCount - 1
	endfunction

}