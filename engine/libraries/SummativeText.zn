library SummativeText requires TechUtils {

	// @const максимальное количество типов плавающего текста
	constant integer MAX_COUNT_TYPE_TEXTS = 7;

	// @const плавающий текст урона будет работать для юнитов
	public constant boolean FLOATING_DMG_ON_UNITS = true;

	// @const время при котором значение нового текста суммируется с предыдущем (0.25 думаю лучше будет)
	constant real ADD_UP_TIME = 0.3;

	// @const задержка набирания скорости плавающим текстом
	constant real VELOCITY_DELAY = 0.3;

	// @const настройки критического текста
	public constant real CRITICAL_INIT_SIZE = 9.;
	public constant real CRITICAL_BONUS_SIZE = 4.25;
	public constant real CRITICAL_TIME_LIFE = 1.;
	public constant real CRITICAL_TIME_FADE = 0.6;
	public constant real CRITICAL_OFFSET_Z = 90.;
	public constant real CRITICAL_MIN_SPEED = 50.;
	public constant real CRITICAL_MAX_SPEED = 70.;
	public constant real CRITICAL_MIN_ANGLE = 0.;
	public constant real CRITICAL_MAX_ANGLE = 360.;

	// @const цвета урона
	public constant string CRITICAL_PHYS_COLOR = "|cffff0303";
	public constant string CRITICAL_MAGIC_COLOR = "|cffeb2a74";
	public constant string CRITICAL_PURE_COLOR = "|cffff8420";
	//public constant string CRITICAL_DMG_COLOR ="|cffd33933";
	public constant string PURE_DMG_COLOR = "|cfff5f82b";
	public constant string MAGICAL_DMG_COLOR = "|cffb76bff";

	constant real S2V = 0.071 / 128.;

	// @const типы суммирующего текста
	public constant integer HEAL_TEXT = 1;
	public constant integer MANA_TEXT = 2;
	public constant integer BLOCK_TEXT = 3;
	public constant integer DMG_TEXT = 4;
	public constant integer REGULAR_TEXT = 5;
	public constant integer GOLD_TEXT = 5;

	string Prefix[MAX_COUNT_TYPE_TEXTS];
	string Postfix[MAX_COUNT_TYPE_TEXTS];
	real VelocityY[MAX_COUNT_TYPE_TEXTS];
	real MaxLifeTime[MAX_COUNT_TYPE_TEXTS];
	real MinSize[MAX_COUNT_TYPE_TEXTS];
	real MaxSize[MAX_COUNT_TYPE_TEXTS];
	real MaxBonusSize[MAX_COUNT_TYPE_TEXTS];
	real MaxBonusValue[MAX_COUNT_TYPE_TEXTS];
	boolean PositionOnOverhead[MAX_COUNT_TYPE_TEXTS];
	real OffsetHeight[MAX_COUNT_TYPE_TEXTS];
	real OffsetX[MAX_COUNT_TYPE_TEXTS];
	real OffsetY[MAX_COUNT_TYPE_TEXTS];

	hashtable HTInternal[MAX_COUNT_TYPE_TEXTS];

	function Save(player owner, unit target, integer textType, SummativeText summativeText) {
		SaveInteger(HTInternal[textType], GetHandleId(owner), GetHandleId(target), summativeText);
	}

	function Remove(player owner, unit target, integer textType) {
		RemoveSavedInteger(HTInternal[textType], GetHandleId(owner), GetHandleId(target));
	}

	function Load(player owner, unit target, integer textType) -> SummativeText {
		return LoadInteger(HTInternal[textType], GetHandleId(owner), GetHandleId(target));
	}

	struct VelocityTextTag {
		texttag tag;
		real velocity;
		real timeLife;
		integer textType;
		boolean destroyOnExpire;

		timer tm;

		static real INTERVAL = 1./32.;

		static method create(integer textType, player owner) -> VelocityTextTag {
			VelocityTextTag this = VelocityTextTag.allocate();
			if (owner == GetLocalPlayer()) {
				this.tag = CreateTextTag();
			} else {
				this.tag = null;
			}
			this.velocity = 0;
			this.timeLife = MaxLifeTime[textType];
			this.textType = textType;
			this.destroyOnExpire = false;
			this.tm = CreateTimer();
			SaveHandleDataInt(this.tm, this);
			TimerStart(this.tm, INTERVAL, true, function VelocityTextTag.callback);
			return this;
		}

		method destroy() {
			DestroyTextTag(tag); tag = null;
			FlushTimer(tm); tm = null;
			this.deallocate();
		}

		static method callback() {
			VelocityTextTag this = LoadHandleDataInt(GetExpiredTimer());
			real p = 1 - (timeLife + VELOCITY_DELAY) / MaxLifeTime[textType];
			velocity = VelocityY[textType] * MaxReal(0., p);
			timeLife = timeLife - INTERVAL;
			if (tag != null) SetTextTagVelocity(tag, 0, velocity);
			if (timeLife <= 0 && destroyOnExpire) {
				this.destroy();
			}
		}

	}

	public struct SummativeText {
		VelocityTextTag vtag;
		player owner;
		unit target;
		integer textType;
		string prefix;

		real value;

		timer tm;

		static method create(player owner, unit target, integer textType) -> SummativeText {
			SummativeText this = SummativeText.allocate();
			this.vtag = VelocityTextTag.create(textType, owner);
			this.owner = owner;
			this.target = target;
			this.textType = textType;

			this.value = 0;

			this.tm = CreateTimer();
			SaveHandleDataInt(this.tm, this);
			TimerStart(this.tm, MaxLifeTime[textType], false, function SummativeText.expired);

			Save(owner, target, textType, this);

			return this;
		}

		method addValue(real addValue, string prefix) -> SummativeText {
			value += addValue;
			if (TimerGetElapsed(tm) > ADD_UP_TIME) {
				vtag.destroyOnExpire = true; 
				vtag = VelocityTextTag.create(textType, owner);
				value = addValue;
			}
			if (prefix == "") {
				this.prefix = Prefix[textType];
			} else {
				this.prefix = prefix;
			}	
			vtag.timeLife = MaxLifeTime[textType];
			if (vtag.tag != null) {
				this.makeTextTag();
				if (!IsUnitFogged(target, owner) && IsUnitVisible(target, owner) && GetLocalPlayer() == owner) {
					SetTextTagVisibility(this.vtag.tag, true);
				}
			}
			PauseTimer(tm);
			TimerStart(tm, MaxLifeTime[textType], false, function SummativeText.expired);
			return this;
		}

		method makeTextTag() -> SummativeText {
			SetTextTagText(vtag.tag, prefix + I2S(R2I(value + 0.5)) + Postfix[textType], TextTagSize2Height(MinReal(MaxSize[textType], MinSize[textType] + MaxBonusSize[textType] * (value / MaxBonusValue[textType]))));
			if (PositionOnOverhead[textType]) {
				SetTextTagPosUnit(vtag.tag, target, OffsetHeight[textType]);
			} else {
				SetTextTagPos(vtag.tag, GetUnitX(target) + OffsetX[textType], GetUnitY(target) + OffsetY[textType], OffsetHeight[textType] + MaxReal(GetUnitFlyHeight(target) - 60., 0));
			}
			SetTextTagVelocity(vtag.tag, 0, 0);
			SetTextTagAge(vtag.tag, 0);
			SetTextTagPermanent(vtag.tag, false);
			SetTextTagLifespan(vtag.tag, MaxLifeTime[textType]);
			SetTextTagFadepointBJ(vtag.tag, ADD_UP_TIME);
			SetTextTagVisibility(this.vtag.tag, false);
			return this; 
		}

		method showToPlayer(player participant) -> SummativeText {
			if (!IsUnitFogged(target, participant) && IsUnitVisible(target, participant) && GetLocalPlayer() == participant) {
				if (vtag.tag == null) {
					this.vtag.tag = CreateTextTag();
					this.makeTextTag();
				}
				SetTextTagVisibility(this.vtag.tag, true);
			}
			return this;
		}

		method hideToPlayer(player participant) -> SummativeText {
			if (vtag.tag != null && !IsUnitFogged(target, participant) && IsUnitVisible(target, participant) && GetLocalPlayer() == participant) {
				SetTextTagVisibility(this.vtag.tag, false);
			}
			return this;
		}

		method showToObservers() -> SummativeText {
			if (IsPlayerInForce(owner, GetObserverForce())) {
				SetTextTagVisibility(this.vtag.tag, false);
				return this;
			}

			This = this;
			ForForce(GetObserverForce(), function() {
				SummativeText this = This;
				this.showToPlayer(GetEnumPlayer());
			});
			return this;
		}

		method destroy() {
			Remove(owner, target, textType);
			vtag.destroy();
			owner = null;
			target = null;
			FlushTimer(tm); tm = null;
			this.deallocate();
		}

		static method expired() {
			SummativeText this = LoadHandleDataInt(GetExpiredTimer());
			this.destroy();
		}

	}

	function GetSummativeTextByUnitAndPlayerAndTextType(player owner, unit target, integer textType) -> SummativeText {
		SummativeText summativeText = Load(owner, target, textType);
		
		if (summativeText == 0)
			return SummativeText.create(owner, target, textType);
		
		return summativeText;
	}

	// Добавляет суммирующий текст к юниту для игрока
	// @arg player owner игрок, которому будет показан суммирующий текст
	// @arg unit target юнит, к которому будет добавлен суммирующий текст
	// @arg integer textType тип суммирующего текста
	// @arg real value значение суммирующего текста
	// @arg string prefix префикс суммирующего текста
	// @return SummativeText созданный суммирующий текст
	public function AddSummativeTextToUnitForPlayer(
		player owner,
		unit target,
		integer textType,
		real value,
		string prefix
	) -> SummativeText {
		SummativeText summativeText = GetSummativeTextByUnitAndPlayerAndTextType(owner, target, textType);
		summativeText.addValue(value, prefix);
		return summativeText;
	}

	// Показывает суммирующий текст для игрока
	// @arg SummativeText summativeText суммирующий текст, который нужно показать
	// @arg player participant игрок, которому нужно показать суммирующий текст
	// @return SummativeText суммирующий текст, который был показан
	public function ShowSummativeTextToPlayer(SummativeText summativeText, player participant) {
		summativeText.showToPlayer(participant);
	}

	function onInit() {
		Prefix[HEAL_TEXT] = "|cff00ff00+";	   // префикс
		Postfix[HEAL_TEXT] = " ♥|r";			// постфикс
		VelocityY[HEAL_TEXT] = 100 * S2V;		// скорость (0..100)
		MaxLifeTime[HEAL_TEXT] = 1.;			// время жизни
		MinSize[HEAL_TEXT] = 9.;				// минимальный размер (изменяется в зависимости от значения value)
		MaxSize[HEAL_TEXT] = 14.;				// максимальный размер
		MaxBonusSize[HEAL_TEXT] = 5.;			// максимальный бонусный размер
		MaxBonusValue[HEAL_TEXT] = 3000.;		// фактор значения
		PositionOnOverhead[HEAL_TEXT] = false;	// показывать выше хпбара
		OffsetHeight[HEAL_TEXT] = 120;			// смещение по высоте
		OffsetX[HEAL_TEXT] = -90;				// смещение по X (не работает с PositionOnOverhead)
		OffsetY[HEAL_TEXT] = 60;				// смещение по Y (не работает с PositionOnOverhead)

		Prefix[MANA_TEXT] = "|cff0080ff+";
		Postfix[MANA_TEXT] = " ▲|r";
		VelocityY[MANA_TEXT] = 100 * S2V;
		MaxLifeTime[MANA_TEXT] = 1.;
		MinSize[MANA_TEXT] = 9.;
		MaxSize[MANA_TEXT] = 14.;
		MaxBonusSize[MANA_TEXT] = 5.;
		MaxBonusValue[MANA_TEXT] = 3000.;
		PositionOnOverhead[MANA_TEXT] = false;
		OffsetHeight[MANA_TEXT] = 120;
		OffsetX[MANA_TEXT] = -90;
		OffsetY[MANA_TEXT] = 0;

		Prefix[BLOCK_TEXT] = "|cffFF8E00-";
		Postfix[BLOCK_TEXT] = "|r";
		VelocityY[BLOCK_TEXT] = -100 * S2V;
		MaxLifeTime[BLOCK_TEXT] = 1.;
		MinSize[BLOCK_TEXT] = 7.;
		MaxSize[BLOCK_TEXT] = 10.;
		MaxBonusSize[BLOCK_TEXT] = 3.;
		MaxBonusValue[BLOCK_TEXT] = 1000.;
		PositionOnOverhead[BLOCK_TEXT] = false;
		OffsetHeight[BLOCK_TEXT] = 0;
		OffsetX[BLOCK_TEXT] = 0;
		OffsetY[BLOCK_TEXT] = 0;

		Prefix[DMG_TEXT] = "";
		Postfix[DMG_TEXT] = "|r";
		VelocityY[DMG_TEXT] = 100 * S2V;
		MaxLifeTime[DMG_TEXT] = 1.;
		MinSize[DMG_TEXT] = 7.;
		MaxSize[DMG_TEXT] = 12.;
		MaxBonusSize[DMG_TEXT] = 5.;
		MaxBonusValue[DMG_TEXT] = 5000.;
		PositionOnOverhead[DMG_TEXT] = true;
		OffsetHeight[DMG_TEXT] = 0;
		OffsetX[DMG_TEXT] = 0;
		OffsetY[DMG_TEXT] = 0;

		Prefix[REGULAR_TEXT] = "";
		Postfix[REGULAR_TEXT] = " ♦|r";
		VelocityY[REGULAR_TEXT] = 200 * S2V;
		MaxLifeTime[REGULAR_TEXT] = 1.;
		MinSize[REGULAR_TEXT] = 8.;
		MaxSize[REGULAR_TEXT] =  14.;
		MaxBonusSize[REGULAR_TEXT] = 5.;
		MaxBonusValue[REGULAR_TEXT] = 10000.;
		PositionOnOverhead[REGULAR_TEXT] = true;
		OffsetHeight[REGULAR_TEXT] = 60;
		OffsetX[REGULAR_TEXT] = 0;
		OffsetY[REGULAR_TEXT] = 0;

		Prefix[GOLD_TEXT] = "|CffFFD700+";
		Postfix[GOLD_TEXT] = " ○|r";
		VelocityY[GOLD_TEXT] = 200 * S2V;
		MaxLifeTime[GOLD_TEXT] = 1.;
		MinSize[GOLD_TEXT] = 10.;
		MaxSize[GOLD_TEXT] = 18.;
		MaxBonusSize[GOLD_TEXT] = 8.;
		MaxBonusValue[GOLD_TEXT] = 2000.;
		PositionOnOverhead[GOLD_TEXT] = false;
		OffsetHeight[GOLD_TEXT] = 120;
		OffsetX[GOLD_TEXT] = -90;
		OffsetY[GOLD_TEXT] = 0;

		for (1 <= Index <= MAX_COUNT_TYPE_TEXTS)
			HTInternal[Index] = InitHashtable();
	}

}
