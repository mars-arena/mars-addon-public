library Auras requires TechUtils, Events {
	constant integer MaxCountAurasTarget = 100; //Максимальное количество аур, которые могут действовать на одну цель
	constant integer MaxCountAurasOwner = 100; //Максимальное количество аур, которые может излучать один юнит

	key AuraTarget_hid;
	key AuraOwner_hid;

	public Aura TempAura;

	// Событие ауры
	//
	// GetAuraOwnerUnit() -> unit
	// GetAuraTargetUnit() -> unit
	// IsAuraEntered() -> boolean
	// IsAuraOut() -> boolean
	// IsAuraActions() -> boolean
	// GetAuraActionsId() -> integer
	public integer EVENT_AURA;

	function onInit() {
		EVENT_AURA = CreateEvent("EVENT_AURA");
	}

	unit AURA_OWNER_UNIT_GET;
	unit AURA_TARGET_UNIT_GET;
	boolean AURA_IS_ENTERED_GET;
	boolean AURA_IS_OUT_GET;
	boolean AURA_IS_ACTIONS_GET;
	integer AURA_ACTIONS_ID_GET;

	public function GetAuraOwnerUnit() -> unit {
		//debug DebugEvent.a(EVENT_AURA).run();
		return AURA_OWNER_UNIT_GET;
	}
	public function GetAuraTargetUnit() -> unit { debug DebugEvent.a(EVENT_AURA).run(); return AURA_TARGET_UNIT_GET; }
	public function IsAuraEntered() -> boolean { debug DebugEvent.a(EVENT_AURA).run(); return AURA_IS_ENTERED_GET; }
	public function IsAuraOut() -> boolean { debug DebugEvent.a(EVENT_AURA).run(); return AURA_IS_OUT_GET; }
	public function IsAuraActions() -> boolean { debug DebugEvent.a(EVENT_AURA).run(); return AURA_IS_ACTIONS_GET; }
	public function GetAuraActionsId() -> integer { debug DebugEvent.a(EVENT_AURA).run(); return AURA_ACTIONS_ID_GET; }

	struct Aura {
		unit auraUnit;
		integer typeId;
		item itemAura;
		boolean multiActions;
		integer priority;
		boolean multiType;
		boolean refreshOutEnter;
		boolean hardRefresh;
		integer actionsId;
		boolexpr filter;
		real radius;
		real radiusMax;
		real endDuration;
		boolean periodActions;
		real period;
		boolean on;
		timer tmRegistration;
		timer tmPerActions;
		group grEntered;
		group grBufer;
		group grOut;
		real xA;
		real yA;
		integer itemAuraType;
		
		static integer CK_HID = 0;
		static integer unit_hid = 1;
		static integer time_hid = 2;
		
		static method create(unit auraUnit, integer typeId, item itemAura, boolean multiActions, integer priority, boolean multiType, boolean refreshOutEnter, boolean hardRefresh, integer actionsId, boolexpr filter, real radiusMax, real endDuration, boolean periodActions, real period) -> Aura {
			Aura this = Aura.allocate();
			this.auraUnit = auraUnit;
			this.typeId = typeId;
			this.itemAura = itemAura;
			this.itemAuraType = GetItemTypeId(itemAura);
			this.multiActions = multiActions;
			this.priority = priority;
			this.multiType = multiType;
			this.refreshOutEnter = refreshOutEnter;
			this.hardRefresh = hardRefresh;
			this.actionsId = actionsId;
			this.filter = filter;
			this.radius = radiusMax;
			this.radiusMax = radiusMax;
			this.endDuration = endDuration;
			this.periodActions = periodActions;
			this.period = period;
			this.on = false;
			this.grEntered = CreateGroup();
			this.grBufer = CreateGroup();
			this.grOut = CreateGroup();
			this.xA = GetUnitX(auraUnit);
			this.yA = GetUnitY(auraUnit);
			this.tmRegistration = CreateTimer();
			SaveInteger(HT, GetHandleId(this.tmRegistration), CK_HID, this);
			TimerStart(this.tmRegistration, 0., false, function Aura.registration);
			if (periodActions && period > 0) {
				this.tmPerActions = CreateTimer();
				SaveInteger(HT, GetHandleId(this.tmPerActions), CK_HID, this);
				TimerStart(this.tmPerActions, this.period, true, function Aura.perActions);
			}
			return this;
		}
		
		method destroy() {
			This = this;
			ForGroup(grEntered, function() {
				Aura this = This;
				unit u = GetEnumUnit();
				GroupRemoveUnit(grEntered, u);
				if (hardRefresh || !refreshOutEnter) Aura.out(this, u);
				AuraTarget.UnRegAuraForUnit(u, this);
				if (refreshOutEnter) {
					if (hardRefresh) {
						AuraTarget.RefreshOutEnter(u, this);
					} else {
						if (!AuraTarget.IsAddedTypeAura(u, this)) {
							Aura.out(this, u);
						}
					}
				}
			});
			ForGroup(grOut, function() {
				Aura this = This;
				unit u = GetEnumUnit();
				GroupRemoveUnit(grOut, u);
				if (hardRefresh || !refreshOutEnter) Aura.out(this, u);
				AuraTarget.UnRegAuraForUnit(u, this);
				if (refreshOutEnter) {
					if (hardRefresh) {
						AuraTarget.RefreshOutEnter(u, this);
					} else {
						if (!AuraTarget.IsAddedTypeAura(u, this)) {
							Aura.out(this, u);
						}
					}
				}
			});
			auraUnit = null;
			itemAura = null;
			//DestroyBoolExpr(filter);
			filter = null;
			DestroyGroup(grEntered);
			DestroyGroup(grBufer);
			DestroyGroup(grOut);
			grEntered = null;
			grBufer = null;
			grOut = null;
			FlushChildHashtable(HT, GetHandleId(tmRegistration));
			FlushChildHashtable(HT, GetHandleId(tmPerActions));
			PauseTimer(tmRegistration);
			DestroyTimer(tmRegistration);
			PauseTimer(tmPerActions);
			DestroyTimer(tmPerActions);
			tmRegistration = null;
			tmPerActions = null;
			this.deallocate();
		}
		
		static method executeEvent(Aura this, unit u, boolean isEntered, boolean isOut, boolean isActions) {
			AURA_OWNER_UNIT_GET = auraUnit;
			AURA_TARGET_UNIT_GET = u;
			AURA_IS_ENTERED_GET = isEntered;
			AURA_IS_OUT_GET = isOut;
			AURA_IS_ACTIONS_GET = isActions;
			AURA_ACTIONS_ID_GET = actionsId;
			ExecuteEvent(EVENT_BUFF);
		}

		static method out(Aura this, unit u) {
			this.executeEvent(this, u, false, true, false);
		}
		
		static method enter(Aura this, unit u) {
			this.executeEvent(this, u, true, false, false);
		}
		
		static method perAction(Aura this, unit u) {
			if (!IsUnitPaused(u)) {
				this.executeEvent(this, u, false, false, true);
			}
		}
		
		static method perActions() {
			Aura this = LoadInteger(HT, GetHandleId(GetExpiredTimer()), CK_HID);
			This = this;
			ForGroup(grEntered, function() {
				Aura this = This;
				Aura.perAction(this, GetEnumUnit());
			});
			ForGroup(grOut, function() {
				Aura this = This;
				Aura.perAction(this, GetEnumUnit());
			});
		}
		
		static method registration() {
			Aura this = LoadInteger(HT, GetHandleId(GetExpiredTimer()), CK_HID);
			
			xA = GetUnitX(auraUnit);
			yA = GetUnitY(auraUnit);
			
			if (!multiType && itemAura != null && !IsUnitIllusion(auraUnit) && !UnitHasItemType(auraUnit, itemAuraType)) {
				AuraOwner.UnRegAuraForUnit(auraUnit, this);
				return;
			}
			
			if (multiType && itemAura != null && !IsUnitIllusion(auraUnit) && !UnitHasItem(auraUnit, itemAura)) {
				AuraOwner.UnRegAuraForUnit(auraUnit, this);
				return;
			}
			
			GroupClear(grBufer);
			AURA_OWNER_UNIT_GET = auraUnit;
			if (UnitAlive(auraUnit)) {
				GroupEnumUnitsInRangeFiz(grBufer, xA, yA, radius, filter);
			} else if (IsUnitIllusion(auraUnit)) {
				AuraOwner.UnRegAuraForUnit(auraUnit, this);
			}
			
			This = this;
			
			if (!multiActions) {
				This = this;
				ForGroup(grBufer, function() {
					Aura this = This;
					unit u = GetEnumUnit();
					if (priority > 0) {
						AuraTarget.RemoveAurasBelowPriority(u, this);
					}
					if (AuraTarget.IsAddedTypeAura(u, this)) {
						GroupRemoveUnit(grBufer, u);
						GroupRemoveUnit(grOut, u);
					}
					u = null;
				}); 
			}
			
			This = this;
			ForGroup(grEntered, function() {
				Aura this = This;
				unit u = GetEnumUnit();
				timer tm;
				if (!IsUnitInGroup(u, grBufer)) {
					if (IsUnitInRangeXY(u, xA, yA, radius)) {
						GroupRemoveUnit(grEntered, u);
						GroupRemoveUnit(grOut, u);
						if (hardRefresh || !refreshOutEnter) Aura.out(this, u);
						AuraTarget.UnRegAuraForUnit(u, this);
						if (refreshOutEnter) {
							if (hardRefresh) {
								AuraTarget.RefreshOutEnter(u, this);
							} else {
								if (!AuraTarget.IsAddedTypeAura(u, this)) Aura.out(this, u);
							}
						}
					} else if (!IsUnitInGroup(u, grOut)){
						GroupRemoveUnit(grEntered, u);
						GroupAddUnit(grOut, u);
						tm = CreateTimer();
						SaveInteger(HT, GetHandleId(tm), CK_HID, this);
						SaveUnitHandle(HT, GetHandleId(tm), unit_hid, u);
						TimerStart(tm, endDuration, false, function() {
							timer tm = GetExpiredTimer();
							integer tmId = GetHandleId(tm);
							Aura this = LoadInteger(HT, tmId, CK_HID);
							unit u = LoadUnitHandle(HT, tmId, unit_hid);
							if (grOut != null && u != null && IsUnitInGroup(u, grOut)) {
								if (IsUnitInRangeXY(u, GetUnitX(auraUnit), GetUnitY(auraUnit), radius)){
									GroupRemoveUnit(grOut, u);
									GroupAddUnit(grEntered, u);
								} else {
									GroupRemoveUnit(grOut, u);
									if (hardRefresh || !refreshOutEnter) Aura.out(this, u);
									AuraTarget.UnRegAuraForUnit(u, this);
									if (refreshOutEnter) {
										if (hardRefresh) {
											AuraTarget.RefreshOutEnter(u, this);
										} else {
											if (!AuraTarget.IsAddedTypeAura(u, this)) {
												Aura.out(this, u);
											}
										}
									}
								}
							}
							FlushChildHashtable(HT, tmId);
							PauseTimer(tm);
							DestroyTimer(tm);
							u = null;
							tm = null;
						});
					}
				}
				tm = null;
				u = null;
			});
			
			
			This = this;
			ForGroup(grBufer, function() {
				Aura this = This;
				unit u = GetEnumUnit();
				if (!IsUnitInGroup(u, grEntered) && !IsUnitInGroup(u, grOut)) {
					GroupAddUnit(grEntered, u);
					if (hardRefresh == true || !refreshOutEnter) {
						Aura.enter(this, u);
					} else if (!AuraTarget.IsAddedTypeAura(u, this)) {
						Aura.enter(this, u);
					}
					AuraTarget.RegAuraForUnit(u, this);
				}
				u = null;
			});
			if (on == false) {
				on = true;
				TimerStart(this.tmRegistration, 0.1, true, function Aura.registration);
			}
		}
		
	}
	
	struct[60000] AuraTarget
	{
		unit targetUnit;
		Aura auras[MaxCountAurasTarget];
		integer countAuras = 0;
		
		static method create(unit targetUnit) -> AuraTarget {
			AuraTarget this = AuraTarget.allocate();
			this.targetUnit = targetUnit;
			return this;
		}
		
		method destroy() {
			RemoveSavedInteger(HT, GetHandleId(targetUnit), AuraTarget_hid);
			targetUnit = null;
			this.deallocate();
		}
		
		static method RegAuraForUnit(unit u, Aura aura) {
			AuraTarget aTarget;
			integer i = 0;
			if (LoadInteger(HT, GetHandleId(u), AuraTarget_hid) <= 0) {
				aTarget = aTarget.create(u);
				SaveInteger(HT, GetHandleId(u), AuraTarget_hid, aTarget);
			} else {
				aTarget = LoadInteger(HT, GetHandleId(u), AuraTarget_hid);
			}
			for (1 <= i <= aTarget.countAuras) {
				if (aTarget.auras[i] == aura) {
					Error("AT1", "Регистрация уже зарегестрированной ауры для объекта(" + GetUnitName(u) + ").");
					return;
				}
			}
			aTarget.countAuras = aTarget.countAuras + 1;
			aTarget.auras[aTarget.countAuras] = aura;
		
		}
		
		static method UnRegAuraForUnit(unit u, Aura aura) {
			AuraTarget aTarget = LoadInteger(HT, GetHandleId(u), AuraTarget_hid);
			integer i = 0;
			if (aTarget == 0) {
				debug Warning("AT2", "Удаление ауры для не существующего объекта(" + GetUnitName(u) + ").");
				return;
			}
			
			for (1 <= i <= aTarget.countAuras) {
				if (aTarget.auras[i] == aura) {
					aTarget.auras[i] = aTarget.auras[aTarget.countAuras];
					aTarget.auras[aTarget.countAuras] = 0;
					aTarget.countAuras = aTarget.countAuras - 1;
				}
			}
				
			if (aTarget.countAuras == 0) {
				aTarget.destroy();
				return;
			}
			
		}
		
		static method RefreshOutEnter(unit u, Aura aura) {
			AuraTarget aTarget = LoadInteger(HT, GetHandleId(u), AuraTarget_hid);
			integer i = 0;
			if (aTarget == 0) {
				return;
			}
			
			for (1 <= i <= aTarget.countAuras) {
				if (aTarget.auras[i].typeId == aura.typeId) {
					aTarget.auras[i].out(aTarget.auras[i], u);
					aTarget.auras[i].enter(aTarget.auras[i], u);
				}
			}
		}
		
		static method IsAddedTypeAura(unit u, Aura aura) -> boolean {
			AuraTarget aTarget = LoadInteger(HT, GetHandleId(u), AuraTarget_hid);
			integer i = 0;
			if (aTarget == 0) {
				return false;
			}
			
			for (1 <= i <= aTarget.countAuras) {
				if (aTarget.auras[i].typeId == aura.typeId && aTarget.auras[i] != aura) {
					return true;
				}
			}
			return false;
		}
		
		static method RemoveAurasBelowPriority(unit u, Aura aura) {
			AuraTarget aTarget = LoadInteger(HT, GetHandleId(u), AuraTarget_hid);
			integer i = 0;
			if (aTarget == 0) {
				return;
			}
			
			i = 1;
			while(i <= aTarget.countAuras) {
				if (aTarget.auras[i].typeId == aura.typeId && aTarget.auras[i] != aura && aTarget.auras[i].priority < aura.priority && aTarget.auras[i] != 0) {
					aTarget.auras[i].out(aTarget.auras[i], u);
					AuraTarget.UnRegAuraForUnit(u, aTarget.auras[i]);
					i = 1;
				} else {
					i = i + 1;
				}
			}
		}
		
	}
	
	struct AuraOwner
	{
		unit ownerUnit;
		Aura auras[MaxCountAurasOwner];
		integer countAuras = 0;
		
		static method create(unit ownerUnit) -> AuraOwner {
			AuraOwner this = AuraOwner.allocate();
			this.ownerUnit = ownerUnit;
			return this;
		}
		
		method destroy() {
			RemoveSavedInteger(HT, GetHandleId(ownerUnit), AuraOwner_hid);
			ownerUnit = null;
			this.deallocate();
		}
		
		static method RegAuraForUnit(unit u, Aura aura) {
			AuraOwner aOwner;
			integer i = 0;
			if (LoadInteger(HT, GetHandleId(u), AuraOwner_hid) <= 0) {
				aOwner = aOwner.create(u);
				SaveInteger(HT, GetHandleId(u), AuraOwner_hid, aOwner);
			} else {
				aOwner = LoadInteger(HT, GetHandleId(u), AuraOwner_hid);
			}
			for (1 <= i <= aOwner.countAuras) {
				if (aOwner.auras[i] == aura) {
					Error("AO1", "Регистрация уже зарегестрированной ауры для объекта(" + GetUnitName(u) + ").");
					return;
				}
			}
			aOwner.countAuras = aOwner.countAuras + 1;
			aOwner.auras[aOwner.countAuras] = aura;
		
		}
		
		static method UnRegAuraForUnit(unit u, Aura aura) {
			AuraOwner aOwner = LoadInteger(HT, GetHandleId(u), AuraOwner_hid);
			integer i = 0;
			Aura BuferAura;
			if (aOwner == 0) {
				debug Warning("AO2", "Удаление регистрации ауры для не существующего объекта(" + GetUnitName(u) + ").");
				return;
			}
			for (1 <= i <= aOwner.countAuras) {
				if (aOwner.auras[i] == aura) {
					BuferAura = aOwner.auras[i];
					aOwner.auras[i] = aOwner.auras[aOwner.countAuras];
					aOwner.auras[aOwner.countAuras] = 0;
					aOwner.countAuras = aOwner.countAuras - 1;
					BuferAura.destroy();
				}
			}
				
			if (aOwner.countAuras == 0) {
				aOwner.destroy();
			}
		}
		
		static method UnRegAuraForHashId(integer hashId, Aura aura) {
			AuraOwner aOwner = LoadInteger(HT, hashId, AuraOwner_hid);
			integer i = 0;
			Aura BuferAura;
			if (aOwner == 0) {
				return;
			}
			for (1 <= i <= aOwner.countAuras) {
				if (aOwner.auras[i] == aura) {
					BuferAura = aOwner.auras[i];
					aOwner.auras[i] = aOwner.auras[aOwner.countAuras];
					aOwner.auras[aOwner.countAuras] = 0;
					aOwner.countAuras = aOwner.countAuras - 1;
					BuferAura.destroy();
				}
			}
				
			if (aOwner.countAuras == 0) {
				aOwner.destroy();
			}
		}
	}


	
/*----------------Functions---------------------------------------------------------------------------------------------------------------------------------- */

	public function GetTargetAuraByType(unit u, integer typeId) -> Aura {
		AuraTarget aTarget = LoadInteger(HT, GetHandleId(u), AuraTarget_hid);
		integer i = 0;
		if (aTarget == 0) {
			return 0;
		}
		
		for (1 <= i <= aTarget.countAuras) {
			if (aTarget.auras[i].typeId == typeId) {
				return aTarget.auras[i];
			}
		}
		return 0;
	}
	
	public function GetOwnerAuraByType(unit u, integer typeId) -> Aura {
		AuraOwner aOwner = LoadInteger(HT, GetHandleId(u), AuraOwner_hid);
		integer i = 0;
		if (aOwner == 0) {
			return 0;
		}
		
		for (1 <= i <= aOwner.countAuras) {
			if (aOwner.auras[i].typeId == typeId) {
				return aOwner.auras[i];
			}
		}
		return 0;
	}

	public function GetCountOwnerAuraByType(unit u, integer typeId) -> integer {
		AuraOwner aOwner = LoadInteger(HT, GetHandleId(u), AuraOwner_hid);
		integer i = 0;
		integer count = 0;
		if (aOwner == 0) {
			return 0;
		}
		
		for (1 <= i <= aOwner.countAuras) {
			if (aOwner.auras[i].typeId == typeId) {
				count += 1;
			}
		}
		return count;
	}

	public function GetCountTargetAuraByType(unit u, integer typeId) -> integer {
		AuraTarget aTarget = LoadInteger(HT, GetHandleId(u), AuraTarget_hid);
		integer i = 0;
		integer count = 0;
		if (aTarget == 0) {
			return 0;
		}
		
		for (1 <= i <= aTarget.countAuras) {
			if (aTarget.auras[i].typeId == typeId) {
				count += 1;
			}
		}
		return count;
	}
	
	public function GetUnitOwnerForTargetAuraByType(unit u, integer typeId) -> unit {
		AuraTarget aTarget = LoadInteger(HT, GetHandleId(u), AuraTarget_hid);
		integer i = 0;
		if (aTarget == 0) {
			return null;
		}
		
		for (1 <= i <= aTarget.countAuras) {
			if (aTarget.auras[i].typeId == typeId) {
				return aTarget.auras[i].auraUnit;
			}
		}
		return null;
	}

	public function IsUnitTargetAddedTypeAura(unit u, integer typeId) -> boolean {
		AuraTarget aTarget = LoadInteger(HT, GetHandleId(u), AuraTarget_hid);
		integer i = 0;
		if (aTarget == 0) {
			return false;
		}
		
		for (1 <= i <= aTarget.countAuras) {
			if (aTarget.auras[i].typeId == typeId) {
				return true;
			}
		}
		return false;
	}
	
	public function IsUnitOwnerAddedTypeAura(unit u, integer typeId) -> boolean {
		AuraOwner aOwner = LoadInteger(HT, GetHandleId(u), AuraOwner_hid);
		integer i = 0;
		if (aOwner == 0) {
			return false;
		}
		
		for (1 <= i <= aOwner.countAuras) {
			if (aOwner.auras[i].typeId == typeId) {
				return true;
			}
		}
		return false;
	}
	
	public function DestroyUnitAurasByType(unit u, integer typeId, boolean AllowMultiType) {
		AuraOwner aOwner = LoadInteger(HT, GetHandleId(u), AuraOwner_hid);
		integer i = 0;
		if (aOwner == 0) {
			return;
		}
		
		if (AllowMultiType) {
			i = 1;
			while(i <= aOwner.countAuras) {
				if (aOwner.auras[i].typeId == typeId && !aOwner.auras[i].multiType && aOwner.auras[i] != 0) {
					AuraOwner.UnRegAuraForUnit(u, aOwner.auras[i]);
					i = 1;
				} else {
					i = i + 1;
				}
			}
		} else {
			i = 1;
			while(i <= aOwner.countAuras) {
				if (aOwner.auras[i].typeId == typeId && aOwner.auras[i] != 0) {
					AuraOwner.UnRegAuraForUnit(u, aOwner.auras[i]);
					i = 1;
				} else {
					i = i + 1;
				}
			}
		}
	}
	
	public function DestroyAllAurasByHashId(integer hashId) {
		AuraOwner aOwner = LoadInteger(HT, hashId, AuraOwner_hid);
		integer i = 0;
		if (aOwner == 0) {
			return;
		}
		
		i = 1;
		while(i <= aOwner.countAuras) {
			if (aOwner.auras[i] != 0) {
				AuraOwner.UnRegAuraForHashId(hashId, aOwner.auras[i]);
				i = 1;
			} else {
				i = i + 1;
			}
		}
	}
	
	public function AddAuraToUnit(
		unit auraUnit,
		integer typeId,
		item itemAura,
		boolean multiAurasToTarget,
		integer priority,
		boolean multiAurasForOwner,
		boolean refreshOutEnter,
		boolean hardRefresh,
		integer actionsId,
		boolexpr filter,
		real radiusMax,
		real endDuration,
		boolean periodActions,
		real period)
		-> Aura
	{
		Aura aura;
		if (!multiAurasForOwner) {
			DestroyUnitAurasByType(auraUnit, typeId, true);
		}
		aura = Aura.create(auraUnit, typeId, itemAura, multiAurasToTarget, priority, multiAurasForOwner, refreshOutEnter, hardRefresh, actionsId, filter, radiusMax, endDuration, periodActions, period);
		AuraOwner.RegAuraForUnit(auraUnit, aura);
		return aura;
	}

	public function AddAuraToUnitGUI() -> Aura {
		unit auraUnit = udg_AS_AuraUnit;
		integer typeId = udg_AS_TypeId;
		item itemAura = udg_AS_ItemAura;
		boolean multiAurasToTarget = udg_AS_MultiAurasToTarget;
		integer priority = udg_AS_Priority;
		boolean multiAurasForOwner = udg_AS_MultiAurasForOwner;
		boolean refreshOutEnter = udg_AS_RefreshOutEnter;
		boolean hardRefresh = udg_AS_HardRefresh;
		integer actionsId = udg_AS_ActionsId;
		boolexpr filter = udg_AS_Filter;
		real radiusMax = udg_AS_RadiusMax;
		real endDuration = udg_AS_EndDuration;
		boolean periodActions = udg_AS_PeriodActions;
		real period = udg_AS_Period;
		Aura aura;
		if (!multiAurasForOwner) {
			DestroyUnitAurasByType(auraUnit, typeId, true);
		}
		aura = Aura.create(auraUnit, typeId, itemAura, multiAurasToTarget, priority, multiAurasForOwner, refreshOutEnter, hardRefresh, actionsId, filter, radiusMax, endDuration, periodActions, period);
		AuraOwner.RegAuraForUnit(auraUnit, aura);
		return aura;
	}

}
