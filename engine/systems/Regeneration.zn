library Regeneration requires Events, Buffs, Auras {

// Variables

	// Событие модификатора регенерации здоровья
	//
	// GetRegenModifierUnit() -> unit
	// GetRegenModifierFlat() -> real
	// GetRegenModifierPenalty() -> real
	// GetRegenModifierIncrease() -> real
	// GetRegenModifierDecrease() -> real
	// AddRegenModifierFlat(real regenFlat)
	// AddRegenModifierPenalty(real regenPenalty)
	// AddRegenModifierIncrease(real regenIncrease)
	// AddRegenModifierDecrease(real regenDecrease)
	// SetRegenModifierFlat(real regenFlat)
	// SetRegenModifierPenalty(real regenPenalty)
	// SetRegenModifierIncrease(real regenIncrease)
	// SetRegenModifierDecrease(real regenDecrease)
	public integer EVENT_HP_REGENERATION_MODIFIER;

	// Событие регенерации здоровья
	//
	// GetRegenUnit() -> unit
	// GetRegenValue() -> real
	public integer EVENT_HP_REGENERATION;

	// Событие модификатора регенерации маны
	//
	// GetRegenModifierUnit() -> unit
	// GetRegenModifierFlat() -> real
	// GetRegenModifierPenalty() -> real
	// GetRegenModifierIncrease() -> real
	// GetRegenModifierDecrease() -> real
	// AddRegenModifierFlat(real regenFlat)
	// AddRegenModifierPenalty(real regenPenalty)
	// AddRegenModifierIncrease(real regenIncrease)
	// AddRegenModifierDecrease(real regenDecrease)
	// SetRegenModifierFlat(real regenFlat)
	// SetRegenModifierPenalty(real regenPenalty)
	// SetRegenModifierIncrease(real regenIncrease)
	// SetRegenModifierDecrease(real regenDecrease)
	public integer EVENT_MP_REGENERATION_MODIFIER;

	// Событие регенерации маны
	//
	// GetRegenUnit() -> unit
	// GetRegenValue() -> real
	public integer EVENT_MP_REGENERATION;

	// Hash Variables
	key REGENERATION_HID;

	// Event Variables
	unit RegenModifierUnit = null;
	real RegenModifierFlat = 0.;		// flat 
	real RegenModifierPenalty = 0.;		// flat
	real RegenModifierIncrease = 0.;	// percentage
	real RegenModifierDecrease = 0.;	// percentage
	real RegenModifierCap = 0.;			// flat

	unit REGEN_UNIT_GET = null;
	real REGEN_VALUE_GET = 0.;

// Debug

	boolean Debug = true;
	boolean IsRun = false;

	function dbg(string msg, real x, real y) {
		if (Debug) DebugXY(msg, x, y);
	}

// Event API

	// Event Getters

	public function GetRegenModifierUnit() -> unit { debug DebugEvent.a(EVENT_HP_REGENERATION_MODIFIER).a(EVENT_MP_REGENERATION_MODIFIER).run(); return RegenModifierUnit; }
	public function GetRegenModifierFlat() -> real { debug DebugEvent.a(EVENT_HP_REGENERATION_MODIFIER).a(EVENT_MP_REGENERATION_MODIFIER).run(); return RegenModifierFlat; }
	public function GetRegenModifierPenalty() -> real { debug DebugEvent.a(EVENT_HP_REGENERATION_MODIFIER).a(EVENT_MP_REGENERATION_MODIFIER).run(); return RegenModifierPenalty; }
	public function GetRegenModifierIncrease() -> real { debug DebugEvent.a(EVENT_HP_REGENERATION_MODIFIER).a(EVENT_MP_REGENERATION_MODIFIER).run(); return RegenModifierIncrease; }
	public function GetRegenModifierDecrease() -> real { debug DebugEvent.a(EVENT_HP_REGENERATION_MODIFIER).a(EVENT_MP_REGENERATION_MODIFIER).run(); return RegenModifierDecrease; }

	public function GetRegenUnit() -> unit { debug DebugEvent.a(EVENT_HP_REGENERATION).a(EVENT_MP_REGENERATION).run(); return REGEN_UNIT_GET; }
	public function GetRegenValue() -> real { debug DebugEvent.a(EVENT_HP_REGENERATION).a(EVENT_MP_REGENERATION).run(); return REGEN_VALUE_GET; }

	public function GetRegenModifierCap() -> real { debug DebugEvent.a(EVENT_HP_REGENERATION_MODIFIER).a(EVENT_MP_REGENERATION_MODIFIER).run(); return RegenModifierCap; }

	// Event Adders

	public function AddRegenModifierFlat(real regenFlat) { debug DebugEvent.a(EVENT_HP_REGENERATION_MODIFIER).a(EVENT_MP_REGENERATION_MODIFIER).run(); RegenModifierFlat += regenFlat; }
	public function AddRegenModifierPenalty(real regenPenalty) { debug DebugEvent.a(EVENT_HP_REGENERATION_MODIFIER).a(EVENT_MP_REGENERATION_MODIFIER).run(); RegenModifierPenalty += regenPenalty; }
	public function AddRegenModifierIncrease(real regenIncrease) { debug DebugEvent.a(EVENT_HP_REGENERATION_MODIFIER).a(EVENT_MP_REGENERATION_MODIFIER).run(); RegenModifierIncrease += regenIncrease; }
	public function AddRegenModifierDecrease(real regenDecrease) { debug DebugEvent.a(EVENT_HP_REGENERATION_MODIFIER).a(EVENT_MP_REGENERATION_MODIFIER).run(); RegenModifierDecrease += regenDecrease; }
	public function AddRegenModifierCap(real regenCap) { debug DebugEvent.a(EVENT_HP_REGENERATION_MODIFIER).a(EVENT_MP_REGENERATION_MODIFIER).run(); RegenModifierCap = MaxReal(regenCap, RegenModifierCap); }

	// Event Setters

	public function SetRegenModifierFlat(real regenFlat) { debug DebugEvent.a(EVENT_HP_REGENERATION_MODIFIER).a(EVENT_MP_REGENERATION_MODIFIER).run(); RegenModifierFlat = regenFlat; }
	public function SetRegenModifierPenalty(real regenPenalty) { debug DebugEvent.a(EVENT_HP_REGENERATION_MODIFIER).a(EVENT_MP_REGENERATION_MODIFIER).run(); RegenModifierPenalty = regenPenalty; }
	public function SetRegenModifierIncrease(real regenIncrease) { debug DebugEvent.a(EVENT_HP_REGENERATION_MODIFIER).a(EVENT_MP_REGENERATION_MODIFIER).run(); RegenModifierIncrease = regenIncrease; }
	public function SetRegenModifierDecrease(real regenDecrease) { debug DebugEvent.a(EVENT_HP_REGENERATION_MODIFIER).a(EVENT_MP_REGENERATION_MODIFIER).run(); RegenModifierDecrease = regenDecrease; }
	public function SetRegenModifierCap(real regenCap) { debug DebugEvent.a(EVENT_MP_REGENERATION_MODIFIER).a(EVENT_HP_REGENERATION_MODIFIER).run(); RegenModifierCap = regenCap; }

// System

	// Возвращает текущее значение регенерации HP юнита (без перерасчёта).
	// @arg unit whichUnit — целевой юнит
	// @return real — скорость регенерации здоровья
	public function GetUnitHpRegen(unit whichUnit) -> real {
		return Regeneration.get(whichUnit).hpRegen;
	}

	// Возвращает текущее значение регенерации HP юнита (без перерасчёта).
	// @arg unit whichUnit — целевой юнит
	// @return real — скорость регенерации здоровья
	public function GetUnitMpRegen(unit whichUnit) -> real {
		return Regeneration.get(whichUnit).mpRegen;
	}

	// Пересчитывает регенерацию HP юнита с учётом модификаторов (EVENT_HP_REGENERATION_MODIFIER).
	// Учитывает штрафы, кап, увеличения/уменьшения, сохраняет результат и возвращает его.
	// @arg unit whichUnit — целевой юнит
	// @return real — новая скорость регенерации HP
	public function UpdateUnitHpRegen(unit whichUnit) -> real {
		real value = 0.0;

		if (whichUnit == null) {
			debug Warning("HP01", "unit is null");
			return 0.0;
		}
		if (IsRun) {
			Error("REG01", "Внутренее иницирование системы!");
			return GetUnitHpRegen(whichUnit);
		}

		IsRun = true;
		RegenModifierFlat = 0.0;
		RegenModifierPenalty = 0.0;
		RegenModifierIncrease = 0.0;
		RegenModifierDecrease = 0.0;
		RegenModifierCap = 0.0;
		RegenModifierUnit = whichUnit;

		ExecuteEvent(EVENT_HP_REGENERATION_MODIFIER);

		value = (RegenModifierFlat - RegenModifierPenalty) * (1.00 + RegenModifierIncrease) * (1 - RegenModifierDecrease); 

		if (RegenModifierCap > 0 && value > RegenModifierCap) {
			value = RegenModifierCap;
		}

		if (value < 0) {
			value = 0.0;
		}

		debug dbg("hp: " + R2S(value), GetUnitX(whichUnit), GetUnitY(whichUnit));

		Regeneration.get(whichUnit).hpRegen = value;
		IsRun = false;
		
		return value;
	}

	// Пересчитывает регенерацию MP юнита с учётом модификаторов (EVENT_MP_REGENERATION_MODIFIER).
	// Учитывает штрафы, кап, увеличения/уменьшения, сохраняет результат и возвращает его.
	// @arg unit whichUnit — целевой юнит
	// @return real — новая скорость регенерации MP
	public function UpdateUnitMpRegen(unit whichUnit) -> real {
		real value = 0.0;

		if (whichUnit == null) {
			debug Warning("MP01", "unit is null");
			return 0.0;
		}
		if (IsRun) {
			Error("REG01", "Внутренее иницирование системы!");
			return GetUnitMpRegen(whichUnit);
		}

		IsRun = true;
		RegenModifierFlat = 0.0;
		RegenModifierPenalty = 0.0;
		RegenModifierIncrease = 0.0;
		RegenModifierDecrease = 0.0;
		RegenModifierCap = 0.0;
		RegenModifierUnit = whichUnit;

		ExecuteEvent(EVENT_MP_REGENERATION_MODIFIER);

		value = (RegenModifierFlat - RegenModifierPenalty) * (1.00 + RegenModifierIncrease) * (1 - RegenModifierDecrease); 

		if (RegenModifierCap > 0 && value > RegenModifierCap) {
			value = RegenModifierCap;
		}

		if (value < 0) {
			value = 0.0;
		}

		debug dbg("mp: " + R2S(value), GetUnitX(whichUnit), GetUnitY(whichUnit));

		Regeneration.get(whichUnit).mpRegen = value;
		IsRun = false;
		
		return value;
	}

	// Object Structure
	public struct Regeneration {
		unit whichUnit;
		real hpRegen;
		real mpRegen;
		integer hpPercent;
		integer mpPercent;
		boolean needUpdate;

		timer tm;

		static real INTERVAL = 0.25;

		static method create(unit whichUnit) -> Regeneration {
			Regeneration this = Regeneration.allocate();

			this.whichUnit = whichUnit;
			SaveInteger(HT, GetHandleId(whichUnit), REGENERATION_HID, this);
			hpRegen = 0.0;
			mpRegen = 0.0;
			hpPercent = 0;
			mpPercent = 0;
			needUpdate = false;

			this.tm = CreateTimer();
			SaveHandleDataInt(tm, this);
			TimerStart(tm, INTERVAL, true, function Regeneration.callback);

			return this;
		}

		static method load(integer hashId) -> Regeneration {
			return LoadInteger(HT, hashId, REGENERATION_HID);
		}

		static method get(unit whichUnit) -> Regeneration {
			Regeneration this = Regeneration.load(GetHandleId(whichUnit)); 
			if (!IsSet(this))
				this = Regeneration.create(whichUnit);
			return this;
		}

		method destroy() {
			FlushTimer(tm); tm = null;
			whichUnit = null;
			this.deallocate();
		}

		method update() {
			needUpdate = true;
		}

		static method callback() {
			Regeneration this = LoadHandleDataInt(GetExpiredTimer());
			integer hpPercentNew = 0;
			integer mpPercentNew = 0;
			real maxMana = 0.0;

			if (!UnitAlive(whichUnit)) return;

			hpPercentNew = R2I(100.0 * (GetUnitState(whichUnit, UNIT_STATE_LIFE) / GetUnitMaxLife(whichUnit)));
			if (hpPercent != hpPercentNew) {
				hpPercent = hpPercentNew;
				needUpdate = true;
			}

			if (needUpdate) {
				UpdateUnitHpRegen(whichUnit);
			}

			if (hpRegen * INTERVAL > 0.0) {
				SetUnitState(whichUnit, UNIT_STATE_LIFE, GetUnitState(whichUnit, UNIT_STATE_LIFE) + hpRegen * INTERVAL);

				REGEN_VALUE_GET = hpRegen * INTERVAL;
				REGEN_UNIT_GET = whichUnit;
				ExecuteEvent(EVENT_HP_REGENERATION);
				REGEN_VALUE_GET = 0;
				REGEN_UNIT_GET = null;
			}

			maxMana = GetUnitState(whichUnit, UNIT_STATE_MAX_MANA);
			if (maxMana > 0.0) {
				mpPercentNew = R2I(100.0 * (GetUnitState(whichUnit, UNIT_STATE_MANA) / maxMana));
				if (mpPercent != mpPercentNew) {
					mpPercent = mpPercentNew;
					needUpdate = true;
				}

				if (needUpdate) {
					UpdateUnitMpRegen(whichUnit);
				}

				if (mpRegen * INTERVAL > 0.0) {
					SetUnitState(whichUnit, UNIT_STATE_MANA, GetUnitState(whichUnit, UNIT_STATE_MANA) + mpRegen * INTERVAL);
	
					REGEN_VALUE_GET = mpRegen * INTERVAL;
					REGEN_UNIT_GET = whichUnit;
					ExecuteEvent(EVENT_MP_REGENERATION);
					REGEN_VALUE_GET = 0;
					REGEN_UNIT_GET = null;
				}
			}

			needUpdate = false;
		}

	}

	function Update(unit whichUnit) {
		if (IsUnitDummy(whichUnit) ||
			whichUnit == null
		) {
			return;
		}
		Regeneration.get(whichUnit).update();
	}

	function onInit() {
		EVENT_HP_REGENERATION_MODIFIER = CreateEvent("EVENT_HP_REGENERATION_MODIFIER");
		EVENT_HP_REGENERATION = CreateEvent("EVENT_HP_REGENERATION");
		EVENT_MP_REGENERATION_MODIFIER = CreateEvent("EVENT_MP_REGENERATION_MODIFIER");
		EVENT_MP_REGENERATION = CreateEvent("EVENT_MP_REGENERATION");

		RegisterAction(GetHandleId(EVENT_PLAYER_HERO_LEVEL), function() { Update(GetLevelingUnit()); });
		RegisterAction(GetHandleId(EVENT_PLAYER_HERO_SKILL), function() { Update(GetLearningUnit()); });
		RegisterAction(GetHandleId(EVENT_PLAYER_HERO_REVIVABLE), function() { Update(GetRevivableUnit()); });
		RegisterAction(GetHandleId(EVENT_PLAYER_UNIT_DROP_ITEM), function() { Update(GetTriggerUnit()); });
		RegisterAction(GetHandleId(EVENT_PLAYER_UNIT_PICKUP_ITEM), function() { Update(GetTriggerUnit()); });
		RegisterAction(EVENT_ENTER, function() { Update(GetTriggerUnit()); });
		RegisterAction(EVENT_BUFF, function() { Update(GetTriggerBuffTarget()); });
		RegisterAction(EVENT_AURA, function() { Update(GetAuraOwnerUnit()); });
		RegisterAction(EVENT_TALENT_CHOSEN, function() { Update(GetTalentHero()); });
		ForGroup(INIT_UNITS, function() { Update(GetEnumUnit()); });

		// Для аур нужно настроить отдельные обработчики,
	}

}

