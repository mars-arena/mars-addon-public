library Events requires Heroes {

	public constant integer EVENT_NATIVE_GAME_VICTORY               = GetHandleId(EVENT_GAME_VICTORY);
	public constant integer EVENT_NATIVE_GAME_END_LEVEL             = GetHandleId(EVENT_GAME_END_LEVEL);
	public constant integer EVENT_NATIVE_GAME_STATE_LIMIT           = GetHandleId(EVENT_GAME_STATE_LIMIT);
	public constant integer EVENT_NATIVE_GAME_TIMER_EXPIRED         = GetHandleId(EVENT_GAME_TIMER_EXPIRED);
	public constant integer EVENT_NATIVE_GAME_ENTER_REGION          = GetHandleId(EVENT_GAME_ENTER_REGION);
	public constant integer EVENT_NATIVE_GAME_LEAVE_REGION          = GetHandleId(EVENT_GAME_LEAVE_REGION);
	public constant integer EVENT_NATIVE_GAME_TRACKABLE_HIT         = GetHandleId(EVENT_GAME_TRACKABLE_HIT);
	public constant integer EVENT_NATIVE_GAME_TRACKABLE_TRACK       = GetHandleId(EVENT_GAME_TRACKABLE_TRACK);
	public constant integer EVENT_NATIVE_GAME_SHOW_SKILL            = GetHandleId(EVENT_GAME_SHOW_SKILL);
	public constant integer EVENT_NATIVE_GAME_BUILD_SUBMENU         = GetHandleId(EVENT_GAME_BUILD_SUBMENU);

	public constant integer EVENT_NATIVE_ALLIANCE_CHANGED    = GetHandleId(EVENT_PLAYER_ALLIANCE_CHANGED);
	public constant integer EVENT_NATIVE_DEFEAT              = GetHandleId(EVENT_PLAYER_DEFEAT);
	public constant integer EVENT_NATIVE_VICTORY             = GetHandleId(EVENT_PLAYER_VICTORY);
	public constant integer EVENT_NATIVE_LEAVE               = GetHandleId(EVENT_PLAYER_LEAVE);
	public constant integer EVENT_NATIVE_END_CINEMATIC       = GetHandleId(EVENT_PLAYER_END_CINEMATIC);

	public constant integer EVENT_NATIVE_UNIT_ATTACKED               = GetHandleId(EVENT_PLAYER_UNIT_ATTACKED);
	public constant integer EVENT_NATIVE_UNIT_RESCUED                = GetHandleId(EVENT_PLAYER_UNIT_RESCUED);
	public constant integer EVENT_NATIVE_UNIT_DEATH                  = GetHandleId(EVENT_PLAYER_UNIT_DEATH);
	public constant integer EVENT_NATIVE_UNIT_DECAY                  = GetHandleId(EVENT_PLAYER_UNIT_DECAY);
	public constant integer EVENT_NATIVE_UNIT_DETECTED               = GetHandleId(EVENT_PLAYER_UNIT_DETECTED);
	public constant integer EVENT_NATIVE_UNIT_HIDDEN                 = GetHandleId(EVENT_PLAYER_UNIT_HIDDEN);
	public constant integer EVENT_NATIVE_UNIT_SELECTED               = GetHandleId(EVENT_PLAYER_UNIT_SELECTED);
	public constant integer EVENT_NATIVE_UNIT_DESELECTED             = GetHandleId(EVENT_PLAYER_UNIT_DESELECTED);
	public constant integer EVENT_NATIVE_UNIT_CONSTRUCT_START        = GetHandleId(EVENT_PLAYER_UNIT_CONSTRUCT_START);
	public constant integer EVENT_NATIVE_UNIT_CONSTRUCT_CANCEL       = GetHandleId(EVENT_PLAYER_UNIT_CONSTRUCT_CANCEL);
	public constant integer EVENT_NATIVE_UNIT_CONSTRUCT_FINISH       = GetHandleId(EVENT_PLAYER_UNIT_CONSTRUCT_FINISH);
	public constant integer EVENT_NATIVE_UNIT_UPGRADE_START          = GetHandleId(EVENT_PLAYER_UNIT_UPGRADE_START);
	public constant integer EVENT_NATIVE_UNIT_UPGRADE_CANCEL         = GetHandleId(EVENT_PLAYER_UNIT_UPGRADE_CANCEL);
	public constant integer EVENT_NATIVE_UNIT_UPGRADE_FINISH         = GetHandleId(EVENT_PLAYER_UNIT_UPGRADE_FINISH);
	public constant integer EVENT_NATIVE_UNIT_TRAIN_START            = GetHandleId(EVENT_PLAYER_UNIT_TRAIN_START);
	public constant integer EVENT_NATIVE_UNIT_TRAIN_CANCEL           = GetHandleId(EVENT_PLAYER_UNIT_TRAIN_CANCEL);
	public constant integer EVENT_NATIVE_UNIT_TRAIN_FINISH           = GetHandleId(EVENT_PLAYER_UNIT_TRAIN_FINISH);
	public constant integer EVENT_NATIVE_UNIT_RESEARCH_START         = GetHandleId(EVENT_PLAYER_UNIT_RESEARCH_START);
	public constant integer EVENT_NATIVE_UNIT_RESEARCH_CANCEL        = GetHandleId(EVENT_PLAYER_UNIT_RESEARCH_CANCEL);
	public constant integer EVENT_NATIVE_UNIT_RESEARCH_FINISH        = GetHandleId(EVENT_PLAYER_UNIT_RESEARCH_FINISH);
	public constant integer EVENT_NATIVE_UNIT_ISSUED_ORDER           = GetHandleId(EVENT_PLAYER_UNIT_ISSUED_ORDER);
	public constant integer EVENT_NATIVE_UNIT_ISSUED_POINT_ORDER     = GetHandleId(EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER);
	public constant integer EVENT_NATIVE_UNIT_ISSUED_TARGET_ORDER    = GetHandleId(EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER);
	public constant integer EVENT_NATIVE_UNIT_ISSUED_UNIT_ORDER      = GetHandleId(EVENT_PLAYER_UNIT_ISSUED_UNIT_ORDER);
	public constant integer EVENT_NATIVE_HERO_LEVEL                  = GetHandleId(EVENT_PLAYER_HERO_LEVEL);
	public constant integer EVENT_NATIVE_HERO_SKILL                  = GetHandleId(EVENT_PLAYER_HERO_SKILL);
	public constant integer EVENT_NATIVE_HERO_REVIVABLE              = GetHandleId(EVENT_PLAYER_HERO_REVIVABLE);
	public constant integer EVENT_NATIVE_HERO_REVIVE_START           = GetHandleId(EVENT_PLAYER_HERO_REVIVE_START);
	public constant integer EVENT_NATIVE_HERO_REVIVE_CANCEL          = GetHandleId(EVENT_PLAYER_HERO_REVIVE_CANCEL);
	public constant integer EVENT_NATIVE_HERO_REVIVE_FINISH          = GetHandleId(EVENT_PLAYER_HERO_REVIVE_FINISH);
	public constant integer EVENT_NATIVE_UNIT_SUMMON                 = GetHandleId(EVENT_PLAYER_UNIT_SUMMON);
	public constant integer EVENT_NATIVE_UNIT_DROP_ITEM              = GetHandleId(EVENT_PLAYER_UNIT_DROP_ITEM);
	public constant integer EVENT_NATIVE_UNIT_PICKUP_ITEM            = GetHandleId(EVENT_PLAYER_UNIT_PICKUP_ITEM);
	public constant integer EVENT_NATIVE_UNIT_USE_ITEM               = GetHandleId(EVENT_PLAYER_UNIT_USE_ITEM);
	public constant integer EVENT_NATIVE_UNIT_LOADED                 = GetHandleId(EVENT_PLAYER_UNIT_LOADED);

	public constant integer EVENT_NATIVE_GAME_LOADED                        = GetHandleId(EVENT_GAME_LOADED);
	public constant integer EVENT_NATIVE_GAME_TOURNAMENT_FINISH_SOON        = GetHandleId(EVENT_GAME_TOURNAMENT_FINISH_SOON);
	public constant integer EVENT_NATIVE_GAME_TOURNAMENT_FINISH_NOW         = GetHandleId(EVENT_GAME_TOURNAMENT_FINISH_NOW);
	public constant integer EVENT_NATIVE_GAME_SAVE                          = GetHandleId(EVENT_GAME_SAVE);

	public constant integer EVENT_NATIVE_ARROW_LEFT_DOWN             = GetHandleId(EVENT_PLAYER_ARROW_LEFT_DOWN);
	public constant integer EVENT_NATIVE_ARROW_LEFT_UP               = GetHandleId(EVENT_PLAYER_ARROW_LEFT_UP);
	public constant integer EVENT_NATIVE_ARROW_RIGHT_DOWN            = GetHandleId(EVENT_PLAYER_ARROW_RIGHT_DOWN);
	public constant integer EVENT_NATIVE_ARROW_RIGHT_UP              = GetHandleId(EVENT_PLAYER_ARROW_RIGHT_UP);
	public constant integer EVENT_NATIVE_ARROW_DOWN_DOWN             = GetHandleId(EVENT_PLAYER_ARROW_DOWN_DOWN);
	public constant integer EVENT_NATIVE_ARROW_DOWN_UP               = GetHandleId(EVENT_PLAYER_ARROW_DOWN_UP);
	public constant integer EVENT_NATIVE_ARROW_UP_DOWN               = GetHandleId(EVENT_PLAYER_ARROW_UP_DOWN);
	public constant integer EVENT_NATIVE_ARROW_UP_UP                 = GetHandleId(EVENT_PLAYER_ARROW_UP_UP);

	public constant integer EVENT_NATIVE_UNIT_SELL                   = GetHandleId(EVENT_PLAYER_UNIT_SELL);
	public constant integer EVENT_NATIVE_UNIT_CHANGE_OWNER           = GetHandleId(EVENT_PLAYER_UNIT_CHANGE_OWNER);
	public constant integer EVENT_NATIVE_UNIT_SELL_ITEM              = GetHandleId(EVENT_PLAYER_UNIT_SELL_ITEM);
	public constant integer EVENT_NATIVE_UNIT_SPELL_CHANNEL          = GetHandleId(EVENT_PLAYER_UNIT_SPELL_CHANNEL);
	public constant integer EVENT_NATIVE_UNIT_SPELL_CAST             = GetHandleId(EVENT_PLAYER_UNIT_SPELL_CAST);
	public constant integer EVENT_NATIVE_UNIT_SPELL_EFFECT           = GetHandleId(EVENT_PLAYER_UNIT_SPELL_EFFECT);
	public constant integer EVENT_NATIVE_UNIT_SPELL_FINISH           = GetHandleId(EVENT_PLAYER_UNIT_SPELL_FINISH);
	public constant integer EVENT_NATIVE_UNIT_SPELL_ENDCAST          = GetHandleId(EVENT_PLAYER_UNIT_SPELL_ENDCAST);
	public constant integer EVENT_NATIVE_UNIT_PAWN_ITEM              = GetHandleId(EVENT_PLAYER_UNIT_PAWN_ITEM);

	constant integer LAST_NATIVE_EVENT = GetHandleId(EVENT_UNIT_PAWN_ITEM);

	trigger EventTriggers[500];
	boolean EventIsRun[500];
	boolean EventHasDispatcher[500];
	string EventName[500];
	integer EventId = LAST_NATIVE_EVENT + 1;

	hashtable HTInternal = InitHashtable();

	key EVENT_ID_HID;
	integer COUNT_TRG_HID = 0;
	integer FIRST_TRG_HID = 1;

	// Cобытие входа в карту (игнорирует дамми-юниты)
	//
	// GetTriggerUnit() -> unit
	public integer EVENT_ENTER;

	// Создаёт новое пользовательское событие и возвращает его ID
	// @arg string name - название события (для отладки и логов)
	// @return integer - уникальный идентификатор события
	public function CreateEvent(string name) -> integer {
		EventId += 1;
		EventTriggers[EventId] = CreateTrigger();
		EventIsRun[EventId] = false;
		EventName[EventId] = name;
		SaveInteger(HT, GetHandleId(EventTriggers[EventId]), EVENT_ID_HID, EventId);
		return EventId;
	}

	// Проверяет, активно ли сейчас выполнение данного события
	// @arg integer eventId - ID события
	// @return boolean - true, если событие в процессе выполнения
	public function IsEventRun(integer eventId) -> boolean { return EventIsRun[eventId]; }

	// Возвращает имя события по его ID
	// @arg integer eventId - ID события
	// @return string - имя события (устанавливается в CreateEvent)
	public function GetEventName(integer eventId) -> string { return EventName[eventId]; }

	// Возвращает ID текущего выполняемого события
	// Не работает для триггеров, созданных через EventRegisterTrigger()
	// @return integer - ID выполняемого события
	public function GetTriggeringEventId() -> integer {
		integer handleId = GetHandleId(GetTriggeringTrigger());
		if (!IsSet(handleId)) {
			Error("E3", "Попытка получить ID события для неинициализированного триггера");
			return 0;
		}
		return LoadInteger(HT, handleId, EVENT_ID_HID);
	}

	// Принудительно выполняет событие (вызов всех его обработчиков)
	// @arg integer eventId - ID события для выполнения
	public function ExecuteEvent(integer eventId) {
		if (IsEventRun(eventId)) {
			Error("E5", "Повторная инициализация ивента: " + GetEventName(eventId));
			return;
		} 
		if (EventTriggers[eventId] == null) {
			Error("E6", "Вызов неинициализированного события: " + I2S(eventId));
			return;
		}
		EventIsRun[eventId] = true;
		TriggerExecute(EventTriggers[eventId]);
		EventIsRun[eventId] = false;
	}

	// Регистрирует действие на указанное событие
	// Автоматически вешает `code` на единый триггер для всех игроков
	// @arg integer eventId - ID события (GetHandleId(EVENT_PLAYER_...) или кастомный ивент (EVENT_AURA_...))
	// @arg code action - функция, которую нужно выполнят при срабатывании события
	// @return triggeraction - ссылка на зарегистрированное действие
	//! @gui [EventHandlers], TriggerActions, TriggerCalls
	public function EventRegisterAction(integer eventId, code action) -> triggeraction {
		if (eventId == 0) {
			Error("E4", "Регистрация действия для не инициализированного события");
			return null;
		}

		// Спец-кейсы, которые этим API поддерживать нельзя
		if (eventId == GetHandleId(EVENT_GAME_VARIABLE_LIMIT) ||
			eventId == GetHandleId(EVENT_PLAYER_STATE_LIMIT)   ||
			eventId == GetHandleId(EVENT_PLAYER_CHAT)) {
			Error("E1", "Событие требует нативного регистратора: " + I2S(eventId));
			return null;
		}

		if (EventTriggers[eventId] == null) {
			// GAME EVENTS
			if (eventId >= GetHandleId(EVENT_GAME_VICTORY) && eventId <= GetHandleId(EVENT_GAME_BUILD_SUBMENU) ||
				eventId >= GetHandleId(EVENT_GAME_LOADED) && eventId <= GetHandleId(EVENT_GAME_SAVE)
			) {
				EventTriggers[eventId] = CreateTrigger();
				TriggerRegisterGameEvent(EventTriggers[eventId], ConvertGameEvent(eventId));
			} else

			// PLAYER EVENTS
			if (eventId >= GetHandleId(EVENT_PLAYER_STATE_LIMIT) && eventId <= GetHandleId(EVENT_PLAYER_END_CINEMATIC) ||
				eventId >= GetHandleId(EVENT_PLAYER_ARROW_LEFT_DOWN) && eventId <= GetHandleId(EVENT_PLAYER_ARROW_UP_UP)
			) {
				EventTriggers[eventId] = CreateTrigger();
				for (0 <= Index < bj_MAX_PLAYER_SLOTS) {
					TriggerRegisterPlayerEvent(EventTriggers[eventId], Player(Index), ConvertPlayerEvent(eventId));
				}
			} else

			// PLAYER UNIT EVENTS
			if (eventId >= GetHandleId(EVENT_PLAYER_UNIT_ATTACKED) && eventId <= GetHandleId(EVENT_PLAYER_UNIT_LOADED) ||
				eventId >= GetHandleId(EVENT_PLAYER_UNIT_SELL) && eventId <= GetHandleId(EVENT_PLAYER_UNIT_PAWN_ITEM)
			) {
				EventTriggers[eventId] = CreateTrigger();
				for (0 <= Index < bj_MAX_PLAYER_SLOTS) {
					TriggerRegisterPlayerUnitEvent(EventTriggers[eventId], Player(Index), ConvertPlayerUnitEvent(eventId), null);
				}
			} else
			
			{
				Error("E1", "Попытка зарегистрировать действие для неизвестного события ID:" + I2S(eventId));
				return null;
			}

			SaveInteger(HT, GetHandleId(EventTriggers[eventId]), EVENT_ID_HID, eventId);
		}

		return TriggerAddAction(EventTriggers[eventId], action);
	}

	public function RegisterAction(integer eventId, code action) {
		EventRegisterAction(eventId, action);
	}

	// Удаляет ранее зарегистрированное действие с события
	// @arg integer eventId - ID события
	// @arg triggeraction action - ссылка на действие, полученное из EventRegisterAction
	public function EventUnregisterAction(integer eventId, triggeraction action) {
		if (EventTriggers[eventId] == null) {
			Error("E2", "Попытка очистить действие для неизвестного события ID:" + I2S(eventId));
			return;
		}
		TriggerRemoveAction(EventTriggers[eventId], action);
	}

	// Регистрирует GUI-триггер на указанное событие (со всеми его условиями/действиями).
	// Работает и для системных EVENT_GAME/PLAYER/PLAYER_UNIT, и для кастомных CreateEvent().
	// @arg trigger trg триггер из GUI (или созданный кодом), который должен срабатывать на eventId
	// @arg integer eventId ID события
	//! @gui [EventHandlers], TriggerEvents 
	public function EventRegisterTrigger(trigger trg, integer eventId) {
		integer countTrg;

		if (trg == null) {
			Error("E4", "Регистрация пустого GUI-триггера");
			return;
		}
		if (eventId == 0) {
			Error("E4", "Регистрация GUI-триггера для не инициализированного события");
			return;
		}

		if (!EventHasDispatcher[eventId]) {
			EventHasDispatcher[eventId] = true;
			EventRegisterAction(eventId, function() {
				integer eventId = GetTriggeringEventId();
				integer countTrg = LoadInteger(HTInternal, eventId, COUNT_TRG_HID);
				integer hashId = FIRST_TRG_HID;
				trigger trg;

				for (FIRST_TRG_HID <= hashId <= countTrg) {
					trg = LoadTriggerHandle(HTInternal, eventId, hashId);
					if (trg != null) {
						if (TriggerEvaluate(trg)) {
							TriggerExecute(trg);
						}
					}
				}

				trg = null;
			});
		}

		countTrg = LoadInteger(HTInternal, eventId, COUNT_TRG_HID) + 1;
		SaveInteger(HTInternal, eventId, COUNT_TRG_HID, countTrg);
		SaveTriggerHandle(HTInternal, eventId, countTrg, trg);
	}

	public DebugEventBuilder DebugEvent;

	public struct DebugEventBuilder {
		static integer events[500];
		static integer count = 0;

		method a(integer eventId) -> DebugEventBuilder {
			count += 1;
			events[count] = eventId;
			return this;
		}

		method run() -> boolean {
			boolean isRun = false;
			integer i = 1;
			string s;

			for(1 <= i <= count) {
				if (IsEventRun(events[i])) {
					count = 0;
					return true;
				}
			}

			s = "";
			for(1 <= i <= count) s += GetEventName(events[i]) + ", ";
			Warning("E1", "Использование EVENT API вне контекста: " + s + " Текущий ивент: " + GetEventName(GetTriggeringEventId()));

			count = 0;
			return false;
		}
	}

	function onInit() {
		region mapArea = CreateRegion();
		EVENT_ENTER = CreateEvent("EVENT_ENTER");
		RegionAddRect(mapArea, GetWorldBounds());
		TriggerRegisterEnterRegion(EventTriggers[EVENT_ENTER], mapArea, Condition(function() -> boolean {
			return !IsUnitDummy(GetTriggerUnit());
		}));
		DebugEvent = DebugEventBuilder.create();

		mapArea = null;
	}

}
