library Gold requires Events {

// Variables

	// Событие модификатора золота
	// GetGoldModifierBonus() -> real
	// GetGoldModifierPenalty() -> real
	// GetGoldModifierIncrease() -> real
	// GetGoldModifierDecrease() -> real
	// AddGoldModifierBonus(real goldBonus)
	// AddGoldModifierPenalty(real goldPenalty)
	// AddGoldModifierIncrease(real goldIncrease)
	// AddGoldModifierDecrease(real goldDecrease)
	// GetGoldPlayer() -> player
	// GetGoldSourceUnit() -> unit
	public integer EVENT_GOLD_MODIFIER;

	// GetGoldPlayer() -> player
	// GetGoldSourceUnit() -> unit
	// GetGoldAmount() -> real
	public integer EVENT_GOLD;

	// Event Variables
	real GoldModifierBonus;			// flat bonus
	real GoldModifierPenalty;		// flat penalty
	real GoldModifierIncrease;		// percentage
	real GoldModifierDecrease;		// percentage

	player GoldPlayer;				// event player
	real GoldAmount;				// flat 
	unit GoldSourceUnit;			// source unit

	SummativeText TempText;

// Event API

	// Event Modifier Getters
	public function GetGoldModifierBonus() -> real { debug DebugEvent.a(EVENT_GOLD_MODIFIER).run(); return GoldModifierBonus; }
	public function GetGoldModifierPenalty() -> real { debug DebugEvent.a(EVENT_GOLD_MODIFIER).run(); return GoldModifierPenalty; }
	public function GetGoldModifierIncrease() -> real { debug DebugEvent.a(EVENT_GOLD_MODIFIER).run(); return GoldModifierIncrease; }
	public function GetGoldModifierDecrease() -> real { debug DebugEvent.a(EVENT_GOLD_MODIFIER).run(); return GoldModifierDecrease; }

	// Event Modifier Adders
	public function AddGoldModifierBonus(real goldBonus) { debug DebugEvent.a(EVENT_GOLD_MODIFIER).run(); GoldModifierBonus += goldBonus; }
	public function AddGoldModifierPenalty(real goldPenalty) { debug DebugEvent.a(EVENT_GOLD_MODIFIER).run(); GoldModifierPenalty += goldPenalty; }
	public function AddGoldModifierIncrease(real goldIncrease) { debug DebugEvent.a(EVENT_GOLD_MODIFIER).run(); GoldModifierIncrease += goldIncrease; }
	public function AddGoldModifierDecrease(real goldDecrease) { debug DebugEvent.a(EVENT_GOLD_MODIFIER).run(); GoldModifierDecrease = RMinBJ((1 - (1 - GoldModifierDecrease) * (1 - goldDecrease)), 1.00); }

	// Event Gold and Modifier Getters
	public function GetGoldPlayer() -> player { debug DebugEvent.a(EVENT_GOLD_MODIFIER).a(EVENT_GOLD).run(); return GoldPlayer; }
	public function GetGoldSourceUnit() -> unit { debug DebugEvent.a(EVENT_GOLD_MODIFIER).a(EVENT_GOLD).run(); return GoldSourceUnit; }
	public function GetGoldAmount() -> real { debug DebugEvent.a(EVENT_GOLD).run(); return GoldAmount; }

// System

	// Добавляет золото игроку с возможностью модификации суммы через EVENT_GOLD_MODIFIER
	// Если итоговая сумма больше 0 - добавляет золото и вызывает событие EVENT_GOLD
	// @arg player whichPlayer - игрок, которому начисляется золото
	// @arg unit sourceUnit - юнит-источник (например, убитый враг)
	// @arg real amount - базовая сумма золота (до модификаторов)
	public function AddGold(player whichPlayer, unit sourceUnit, real amount) {
		GoldPlayer = whichPlayer;
		GoldAmount = amount;
		GoldSourceUnit = sourceUnit;
		GoldModifierBonus = 0.0;
		GoldModifierPenalty = 0.0;
		GoldModifierIncrease = 0.0;
		GoldModifierDecrease = 0.0;

		ExecuteEvent(EVENT_GOLD_MODIFIER);

		if (GoldAmount > 0.0) {
			SetPlayerState(GoldPlayer, PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(GoldPlayer, PLAYER_STATE_RESOURCE_GOLD) + R2I(GoldAmount));
			ExecuteEvent(EVENT_GOLD);
		}
	}

	function onInit() {
		EVENT_GOLD_MODIFIER = CreateEvent("EVENT_GOLD_MODIFIER");
		EVENT_GOLD = CreateEvent("EVENT_GOLD");
		RegisterAction(EVENT_GOLD, function() {
			TempText = AddSummativeTextToUnitForPlayer(GetGoldPlayer(), GetGoldSourceUnit(), GOLD_TEXT, GetGoldAmount(), "");
			TempText.showToPlayer(GetGoldPlayer());
			if (IsMapDuel())
				TempText.showToObservers();
		});
	}

}

